import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import os
from datetime import datetime
import json
import re
import base64
from PIL import Image
import io

# Tentative d'importer Google Generative AI avec une gestion d'erreur
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False

def get_gemini_api_key():
    """
    Obtient la cl√© API Gemini depuis diff√©rentes sources possibles:
    1. Variables de session Streamlit
    2. Variables d'environnement
    3. Saisie manuelle de l'utilisateur
    """
    # V√©rifier si une cl√© existe d√©j√† dans la session
    if "GEMINI_API_KEY" in st.session_state and st.session_state["GEMINI_API_KEY"]:
        return st.session_state["GEMINI_API_KEY"]
    
    # Tenter de lire depuis les secrets Streamlit (avec gestion d'erreur)
    api_key = None
    try:
        api_key = st.secrets.get("GEMINI_API_KEY")
    except:
        pass
    
    # Si pas dans les secrets, essayer depuis les variables d'environnement
    if not api_key:
        api_key = os.environ.get("GEMINI_API_KEY")
    
    # Si toujours pas de cl√©, demander √† l'utilisateur
    if not api_key:
        st.warning("‚ö†Ô∏è Cl√© API Gemini non configur√©e. Veuillez entrer votre cl√© API ci-dessous.")
        api_key = st.text_input("Cl√© API Gemini", type="password", 
                             help="Obtenez votre cl√© sur https://ai.google.dev/")
        if api_key:
            st.session_state["GEMINI_API_KEY"] = api_key
    
    return api_key

# Fonction pour capturer une image d'un graphique Plotly
def fig_to_base64(fig):
    """Convertit une figure Plotly en image base64."""
    img_bytes = fig.to_image(format="png", scale=2)
    return base64.b64encode(img_bytes).decode('utf-8')

def generate_dashboard_context(df):
    """G√©n√®re un contexte basique sur les donn√©es du dashboard pour l'IA."""
    # V√©rifier si df est None ou vide
    if df is None:
        return {
            "total_donneurs": "Non disponible",
            "nombre_donneurs_eligibles": "Non disponible",
            "taux_eligibilite": "Non disponible",
            "distribution_genre": "Non disponible",
            "groupes_sanguins": "Non disponible",
        }
    
    context = {
        "total_donneurs": len(df),
        "nombre_donneurs_eligibles": df[df['eligibilite_code'] == 1].shape[0] if 'eligibilite_code' in df.columns else "Non disponible",
        "taux_eligibilite": f"{df[df['eligibilite_code'] == 1].shape[0] / len(df) * 100:.1f}%" if 'eligibilite_code' in df.columns else "Non disponible",
        "distribution_genre": df['Genre'].value_counts().to_dict() if 'Genre' in df.columns else "Non disponible",
        "groupes_sanguins": df['Groupe_sanguin'].value_counts().to_dict() if 'Groupe_sanguin' in df.columns else "Non disponible",
    }
    
    if 'arrondissement_clean' in df.columns:
        context["donneurs_par_arrondissement"] = df['arrondissement_clean'].value_counts().to_dict()
    
    if 'groupe_age' in df.columns:
        context["donneurs_par_age"] = df['groupe_age'].value_counts().to_dict()
    
    return context

def generate_system_prompt(df):
    """G√©n√®re un prompt syst√®me pour guider l'IA dans ses r√©ponses."""
    context = generate_dashboard_context(df)
    
    return f"""Tu es Dr. Hemo, un assistant m√©dical sp√©cialis√© dans l'analyse des campagnes de don de sang. 
    Tu aides les m√©decins et responsables de campagnes √† interpr√©ter les donn√©es et √† optimiser leurs futures initiatives.
    
    Voici le contexte actuel des donn√©es de la campagne:
    - Nombre total de donneurs: {context['total_donneurs']}
    - Nombre de donneurs √©ligibles: {context['nombre_donneurs_eligibles']}
    - Taux d'√©ligibilit√©: {context['taux_eligibilite']}
    
    R√©ponds de mani√®re pr√©cise, professionnelle mais accessible.
    Si tu ne connais pas la r√©ponse √† une question, indique-le honn√™tement.
    Lorsqu'on te demande des recommandations, base-toi sur les meilleures pratiques m√©dicales.
    
    N'h√©site pas √† sugg√©rer des analyses compl√©mentaires pertinentes lorsque c'est appropri√©.
    
    Ton objectif est d'aider √† sauver des vies en optimisant les campagnes de don de sang.
    """

def generate_blood_fact():
    """G√©n√®re un fait al√©atoire sur le don de sang."""
    facts = [
        "Un don de sang peut sauver jusqu'√† trois vies.",
        "Le corps humain contient environ 5 litres de sang.",
        "Le sang contient des globules rouges, des globules blancs, des plaquettes et du plasma.",
        "Le don de sang prend g√©n√©ralement entre 8 et 10 minutes.",
        "Toutes les 2 secondes, quelqu'un a besoin de sang.",
        "Moins de 10% de la population mondiale √©ligible donne du sang.",
        "Le groupe sanguin O n√©gatif est consid√©r√© comme donneur universel.",
        "Les personnes du groupe AB sont receveurs universels.",
        "Le sang a une dur√©e de conservation limit√©e: 42 jours pour les globules rouges.",
        "Les plaquettes ne peuvent √™tre conserv√©es que 5 jours.",
        "Les hommes peuvent donner du sang tous les 3 mois, les femmes tous les 4 mois.",
        "Le volume sanguin repr√©sente environ 7% du poids corporel humain.",
        "Un adulte en bonne sant√© peut donner environ 470 ml de sang lors d'un don standard.",
        "Le don de plasma peut √™tre effectu√© plus fr√©quemment que le don de sang total.",
        "Le fer est essentiel √† la formation de l'h√©moglobine dans les globules rouges."
    ]
    return np.random.choice(facts)

def process_gemini_response(prompt, chat_history=None, image_base64=None, temperature=0.7):
    """Traite la requ√™te avec l'API Gemini et retourne la r√©ponse."""
    # V√©rifier si Gemini est disponible
    if not GEMINI_AVAILABLE:
        return ("Je suis d√©sol√©, mais l'API Google Generative AI n'est pas disponible. "
                "Veuillez installer le package avec `pip install google-generativeai`.", None)
    
    # Obtenir la cl√© API
    api_key = get_gemini_api_key()
    
    if not api_key:
        return ("Je ne peux pas traiter votre demande car aucune cl√© API Gemini n'est configur√©e. "
                "Veuillez fournir une cl√© API pour activer mes fonctionnalit√©s compl√®tes.", None)
    
    try:
        # Configurer Gemini avec la cl√©
        genai.configure(api_key=api_key)
        
        # Cr√©er le mod√®le
        model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config={"temperature": temperature}
        )
        
        # Deux approches diff√©rentes selon que nous avons un historique ou non
        if chat_history:
            # Cr√©er une conversation sans utiliser de r√¥le syst√®me
            # (Nous injecterons le contexte dans le premier message)
            chat = model.start_chat()
            
            # Si une image est fournie
            if image_base64:
                # Convertir base64 en image
                img_data = base64.b64decode(image_base64)
                image_parts = [
                    {
                        "mime_type": "image/png",
                        "data": img_data
                    },
                    prompt
                ]
                response = chat.send_message(image_parts)
            else:
                # Texte uniquement
                response = chat.send_message(prompt)
            
            # Mettre √† jour l'historique de conversation
            updated_history = chat.history
            
            return response.text, updated_history
        else:
            # Pour la premi√®re interaction, inclure le contexte syst√®me dans la requ√™te
            system_context = generate_system_prompt(None)  # G√©n√©rer sans donn√©es sp√©cifiques
            enhanced_prompt = f"{system_context}\n\nQuestion de l'utilisateur: {prompt}"
            
            # Si une image est fournie
            if image_base64:
                # Convertir base64 en image
                img_data = base64.b64decode(image_base64)
                image_parts = [
                    {
                        "mime_type": "image/png",
                        "data": img_data
                    },
                    enhanced_prompt
                ]
                response = model.generate_content(image_parts)
            else:
                # Texte uniquement
                response = model.generate_content(enhanced_prompt)
            
            return response.text, None  # Pas d'historique √† cette √©tape
            
    except Exception as e:
        error_msg = str(e)
        if "API key not valid" in error_msg.lower():
            return "Erreur: La cl√© API fournie n'est pas valide. Veuillez v√©rifier votre cl√©.", None
        return f"Je suis d√©sol√©, j'ai rencontr√© une erreur: {str(e)}", None

def display_chat_message(role, content, avatar=None):
    """Affiche un message de chat avec style."""
    if role == "assistant":
        with st.chat_message(role, avatar="ü©∏"):
            st.write(content)
    else:
        with st.chat_message(role, avatar="üë®‚Äç‚öïÔ∏è"):
            st.write(content)

def create_visualization_for_question(df, question):
    """Cr√©e une visualisation adapt√©e √† la question pos√©e."""
    if df is None or len(df) == 0:
        st.warning("Aucune donn√©e disponible pour g√©n√©rer des visualisations.")
        return None
    fig = None
    
    # Identifier les mots-cl√©s pour d√©terminer le type de visualisation
    question_lower = question.lower()
    
    # Analyse par groupe sanguin
    if "groupe sanguin" in question_lower or "blood type" in question_lower:
        if 'Groupe_sanguin' in df.columns:
            blood_counts = df['Groupe_sanguin'].value_counts().reset_index()
            blood_counts.columns = ['Groupe sanguin', 'Nombre de donneurs']
            
            # Choisir entre camembert ou barres selon la question
            if "proportion" in question_lower or "pourcentage" in question_lower or "r√©partition" in question_lower:
                fig = px.pie(
                    blood_counts, 
                    values='Nombre de donneurs',
                    names='Groupe sanguin',
                    title="R√©partition des donneurs par groupe sanguin",
                    color_discrete_sequence=px.colors.sequential.RdBu
                )
            else:
                fig = px.bar(
                    blood_counts,
                    x='Groupe sanguin',
                    y='Nombre de donneurs',
                    title="Nombre de donneurs par groupe sanguin",
                    color='Nombre de donneurs',
                    color_continuous_scale='Reds'
                )
    
    # Analyse par √¢ge
    elif "√¢ge" in question_lower or "age" in question_lower or "tranche" in question_lower:
        if 'groupe_age' in df.columns:
            age_counts = df['groupe_age'].value_counts().reset_index()
            age_counts.columns = ['Groupe d\'√¢ge', 'Nombre de donneurs']
            
            # Trier les groupes d'√¢ge
            try:
                def extract_first_num(x):
                    if str(x) == 'nan' or pd.isna(x):
                        return 999
                    try:
                        if '-' in str(x):
                            return int(str(x).split('-')[0])
                        else:
                            return int(''.join(filter(str.isdigit, str(x)[:2])))
                    except:
                        return 998
                
                age_counts['ordre'] = age_counts['Groupe d\'√¢ge'].apply(extract_first_num)
                age_counts = age_counts.sort_values('ordre')
                age_counts = age_counts.drop('ordre', axis=1)
            except Exception as e:
                st.warning(f"Impossible de trier les groupes d'√¢ge: {e}")
            
            fig = px.bar(
                age_counts,
                x='Groupe d\'√¢ge',
                y='Nombre de donneurs',
                title="R√©partition des donneurs par groupe d'√¢ge",
                color='Nombre de donneurs',
                color_continuous_scale='Blues'
            )
    
    # Analyse g√©ographique
    elif "arrondissement" in question_lower or "zone" in question_lower or "quartier" in question_lower or "g√©ographique" in question_lower:
        if 'arrondissement_clean' in df.columns:
            arrond_counts = df['arrondissement_clean'].value_counts().reset_index()
            arrond_counts.columns = ['Arrondissement', 'Nombre de donneurs']
            
            fig = px.bar(
                arrond_counts,
                x='Arrondissement',
                y='Nombre de donneurs',
                title="R√©partition des donneurs par arrondissement",
                color='Nombre de donneurs',
                color_continuous_scale='Reds'
            )
    
    # Analyse d'√©ligibilit√©
    elif "√©ligibilit√©" in question_lower or "eligible" in question_lower or "non-√©ligible" in question_lower:
        if '√âLIGIBILIT√â AU DON.' in df.columns:
            eligibility_counts = df['√âLIGIBILIT√â AU DON.'].value_counts().reset_index()
            eligibility_counts.columns = ['Statut', 'Nombre']
            
            fig = px.pie(
                eligibility_counts,
                values='Nombre',
                names='Statut',
                title="R√©partition de l'√©ligibilit√©",
                color_discrete_sequence=px.colors.sequential.RdBu
            )
    
    # Analyse par genre
    elif "genre" in question_lower or "homme" in question_lower or "femme" in question_lower or "sexe" in question_lower:
        if 'Genre' in df.columns:
            gender_counts = df['Genre'].value_counts().reset_index()
            gender_counts.columns = ['Genre', 'Nombre de donneurs']
            
            fig = px.pie(
                gender_counts,
                values='Nombre de donneurs',
                names='Genre',
                title="R√©partition des donneurs par genre",
                color_discrete_sequence=['#FF6B6B', '#4ECDC4']
            )
    
    # Tendances temporelles
    elif "tendance" in question_lower or "temps" in question_lower or "mois" in question_lower or "ann√©e" in question_lower or "evolution" in question_lower:
        if 'Date_don' in df.columns:
            # Convertir en datetime si ce n'est pas d√©j√† fait
            df['Date_don'] = pd.to_datetime(df['Date_don'], errors='coerce')
            
            # Aggr√©gation par mois
            df['mois'] = df['Date_don'].dt.to_period('M')
            monthly_counts = df.groupby('mois').size().reset_index(name='nombre_dons')
            monthly_counts['mois_str'] = monthly_counts['mois'].astype(str)
            
            fig = px.line(
                monthly_counts,
                x='mois_str',
                y='nombre_dons',
                title="√âvolution mensuelle des dons",
                markers=True
            )
    
    # Analyse des conditions de sant√©
    elif "sant√©" in question_lower or "conditions" in question_lower or "m√©dicale" in question_lower:
        health_cols = [col for col in df.columns if '_indicateur' in col]
        
        if health_cols:
            health_data = []
            for col in health_cols:
                condition_name = col.replace('_indicateur', '')
                count = df[col].sum()
                health_data.append({
                    'Condition': condition_name,
                    'Nombre de cas': count
                })
            
            health_df = pd.DataFrame(health_data)
            health_df = health_df.sort_values('Nombre de cas', ascending=False)
            
            fig = px.bar(
                health_df,
                x='Condition',
                y='Nombre de cas',
                title="Conditions m√©dicales les plus fr√©quentes",
                color='Nombre de cas',
                color_continuous_scale='Reds'
            )
    
    # Si aucune visualisation sp√©cifique n'a √©t√© cr√©√©e, cr√©er une visualisation g√©n√©rale
    if fig is None:
        # Cr√©er une visualisation par d√©faut sur l'√©ligibilit√©
        if '√âLIGIBILIT√â AU DON.' in df.columns:
            eligibility_counts = df['√âLIGIBILIT√â AU DON.'].value_counts().reset_index()
            eligibility_counts.columns = ['Statut', 'Nombre']
            
            fig = px.pie(
                eligibility_counts,
                values='Nombre',
                names='Statut',
                title="R√©partition globale de l'√©ligibilit√© au don",
                color_discrete_sequence=px.colors.sequential.RdBu
            )
        elif 'Genre' in df.columns:
            # Si pas d'√©ligibilit√©, utiliser le genre comme fallback
            gender_counts = df['Genre'].value_counts().reset_index()
            gender_counts.columns = ['Genre', 'Nombre de donneurs']
            
            fig = px.pie(
                gender_counts,
                values='Nombre de donneurs',
                names='Genre',
                title="R√©partition des donneurs par genre",
                color_discrete_sequence=['#FF6B6B', '#4ECDC4']
            )
    
    return fig


# Mode de d√©monstration quand Gemini n'est pas disponible
def demo_response(question):
    """G√©n√®re une r√©ponse de d√©monstration bas√©e sur des r√®gles simples."""
    question_lower = question.lower()
    
    # R√©ponses pr√©d√©finies bas√©es sur des mots-cl√©s
    if "groupe sanguin" in question_lower:
        return "D'apr√®s nos donn√©es, le groupe sanguin O+ est le plus r√©pandu parmi nos donneurs (environ 45%), suivi par A+ (35%). Les groupes rh√©sus n√©gatifs sont plus rares mais tr√®s demand√©s, notamment O- qui est le donneur universel. Une strat√©gie cibl√©e pour attirer plus de donneurs avec des groupes sanguins rares pourrait √™tre b√©n√©fique."
    
    elif "arrondissement" in question_lower:
        return "L'analyse montre que Douala 3 a le plus grand nombre de donneurs (35%), suivi par Douala 5 (25%). Douala 4 est l'arrondissement avec le moins de donneurs (8%). Cette disparit√© pourrait s'expliquer par la densit√© de population, l'accessibilit√© des centres de don, ou l'efficacit√© des campagnes locales de sensibilisation."
    
    elif "√¢ge" in question_lower or "age" in question_lower:
        return "La tranche d'√¢ge 26-35 ans repr√©sente le groupe le plus important de donneurs, avec √©galement le meilleur taux d'√©ligibilit√© (82%). Les jeunes de 18-25 ans ont un bon taux de participation mais l√©g√®rement moins d'√©ligibilit√© (75%). Nous observons une diminution progressive de l'√©ligibilit√© avec l'√¢ge, tombant √† environ 45% pour les 56-65 ans."
    
    elif "genre" in question_lower or "homme" in question_lower or "femme" in question_lower:
        return "Les donn√©es montrent une participation plus √©lev√©e des hommes (60%) par rapport aux femmes (40%). Le taux d'√©ligibilit√© est aussi l√©g√®rement plus √©lev√© chez les hommes (78% contre 72%), principalement en raison des contraintes sp√©cifiques comme la grossesse, l'allaitement et les taux d'h√©moglobine diff√©rents. Des strat√©gies cibl√©es pour encourager le don f√©minin pourraient √™tre envisag√©es."
    
    elif "√©ligibilit√©" in question_lower:
        return "Le taux d'√©ligibilit√© global est de 75%. Les principales raisons d'in√©ligibilit√© temporaire sont le taux d'h√©moglobine bas, un don r√©cent (<3 mois), et des infections r√©centes. Les causes d'in√©ligibilit√© d√©finitive incluent principalement les porteurs de VIH/h√©patite, l'hypertension non contr√¥l√©e et les troubles cardiaques graves."
    
    elif "tendance" in question_lower or "√©volution" in question_lower:
        return "L'analyse des tendances montre une augmentation globale des dons de 15% sur l'ann√©e, avec des pics notables en avril (+20%) et d√©cembre (+25%). Ces pics co√Øncident avec les grandes campagnes nationales. Nous observons √©galement une baisse significative en ao√ªt (-15%), sugg√©rant un impact des vacances d'√©t√©."
    
    elif "recommandation" in question_lower or "strat√©gie" in question_lower or "am√©liorer" in question_lower:
        return "Bas√© sur l'analyse des donn√©es, je recommande:\n\n1. Intensifier les campagnes dans l'arrondissement Douala 4 o√π la participation est la plus faible\n2. Cibler particuli√®rement la tranche d'√¢ge 26-35 ans qui pr√©sente le meilleur taux d'√©ligibilit√©\n3. D√©velopper des incitations sp√©cifiques pour encourager le retour des donneurs (programme de fid√©lit√©)\n4. Organiser des sessions d'information pr√©alables pour r√©duire le taux d'in√©ligibilit√© temporaire\n5. Cr√©er des campagnes cibl√©es pour les groupes sanguins rares comme O- et B-"
    
    elif "image" in question_lower or "analyser" in question_lower:
        return "Je suis capable d'analyser des images ou des graphiques li√©s aux campagnes de don de sang. Pour me montrer une image, utilisez la fonction de t√©l√©chargement d'image dans l'interface ou posez-moi une question sur un graphique g√©n√©r√© par l'assistant."
    
    else:
        return "Je comprends votre question sur les donn√©es de don de sang. Dans le mode de d√©monstration, je peux r√©pondre de fa√ßon basique aux questions sur la r√©partition par groupe sanguin, √¢ge, genre, arrondissement, ainsi que sur l'√©ligibilit√©, les tendances et les recommandations. Pour des analyses plus pr√©cises, vous devrez configurer l'API Gemini."

def assistant_ia(df):
    """Interface principale pour l'assistant IA."""
    st.title("üí¨ Assistant IA d'Analyse des Dons de Sang")
    if df is None:
        st.warning("Les donn√©es n'ont pas pu √™tre charg√©es correctement.")
        df = pd.DataFrame() 
    # V√©rifier si Gemini est disponible
    if not GEMINI_AVAILABLE:
        st.warning("""
        ‚ö†Ô∏è Le package Google Generative AI n'est pas install√©. 
        L'assistant fonctionnera en mode de d√©monstration limit√©.
        
        Pour installer le package et activer toutes les fonctionnalit√©s, ex√©cutez:
        ```
        pip install google-generativeai
        ```
        """)
    
    st.markdown("""
    Posez-moi vos questions sur les donn√©es de la campagne de don de sang. 
    Je peux vous aider √† interpr√©ter les graphiques, √† identifier des tendances, 
    ou √† formuler des recommandations bas√©es sur les donn√©es.
    """)
    
    # Configuration de la cl√© API si besoin
    if GEMINI_AVAILABLE:
        api_key = get_gemini_api_key()
        
        # Si toujours pas de cl√© apr√®s demande √† l'utilisateur, activer le mode d√©mo
        if not api_key:
            st.info("‚ÑπÔ∏è L'assistant fonctionne actuellement en mode d√©monstration limit√©.")
    
    # Initialiser la session state pour le chat
    if "messages" not in st.session_state:
        st.session_state.messages = []
        
        # Message de bienvenue initial
        welcome_message = f"""
        üëã Bonjour! Je suis Dr. Hemo, votre assistant IA pour l'analyse des donn√©es de don de sang.
        
        Je peux vous aider √† comprendre les tendances, analyser les profils des donneurs, 
        et proposer des strat√©gies pour am√©liorer vos futures campagnes.
        
        **Le saviez-vous?** {generate_blood_fact()}
        
        Comment puis-je vous aider aujourd'hui?
        """
        
        st.session_state.messages.append({"role": "assistant", "content": welcome_message})
    
    # Ne plus stocker l'historique de chat avec le r√¥le 'system'
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    # Initialiser un dictionnaire pour stocker les visualisations g√©n√©r√©es
    if "generated_visualizations" not in st.session_state:
        st.session_state.generated_visualizations = {}
    
    # Afficher l'historique des messages
    for message in st.session_state.messages:
        display_chat_message(message["role"], message["content"])
    
    # Option de t√©l√©chargement d'image
    uploaded_file = st.file_uploader("T√©l√©charger une image √† analyser (optionnel)", type=["jpg", "jpeg", "png"])
    image_base64 = None

    if uploaded_file is not None:
        # Convertir l'image en base64
        image_bytes = uploaded_file.getvalue()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        # Afficher l'image
        st.image(uploaded_file, caption="Image t√©l√©charg√©e", use_container_width=True)

    # Entr√©e utilisateur
    prompt = st.chat_input("Posez votre question sur les donn√©es de don de sang...")

    if prompt:
        # Afficher la question de l'utilisateur
        display_chat_message("user", prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        # Si une image a √©t√© t√©l√©charg√©e, ajuster le prompt
        if image_base64:
            enhanced_prompt = f"Voici une image li√©e au don de sang. {prompt}"
            should_generate_viz = False
        else:
            # V√©rifier si la question concerne une visualisation
            should_generate_viz = any(keyword in prompt.lower() for keyword in 
                                    ["montrer", "graphique", "visualiser", "afficher", "graphe", 
                                     "voir", "courbe", "diagramme", "camembert", "tendance", 
                                     "√©volution", "r√©partition", "distribution"])
            enhanced_prompt = prompt
        
        # G√©n√©rer une visualisation si n√©cessaire et qu'aucune image n'a √©t√© t√©l√©charg√©e
        generated_fig = None
        
        if should_generate_viz and not image_base64:
            with st.spinner("G√©n√©ration d'une visualisation..."):
                generated_fig = create_visualization_for_question(df, prompt)
                
                if generated_fig:
                    # Convertir le graphique en image base64 pour Gemini Vision (si disponible)
                    if GEMINI_AVAILABLE and get_gemini_api_key():
                        viz_base64 = fig_to_base64(generated_fig)
                        image_base64 = viz_base64  # Utiliser le graphique comme image
                        enhanced_prompt = f"""
                        Question: {prompt}
                        
                        J'ai g√©n√©r√© un graphique en r√©ponse √† cette question. D√©cris ce que tu vois sur ce graphique,
                        explique les tendances ou les patterns, et fournis des insights pertinents bas√©s sur cette visualisation.
                        """
                    
                    # Stocker la figure pour l'affichage
                    viz_id = f"viz_{len(st.session_state.generated_visualizations)}"
                    st.session_state.generated_visualizations[viz_id] = generated_fig
        
        # Traiter la r√©ponse avec Gemini ou la r√©ponse de d√©monstration
        with st.spinner("Analyse de votre question..."):
            if GEMINI_AVAILABLE and get_gemini_api_key():
                # Obtenir la r√©ponse de l'API (sans utiliser l'historique pour le moment)
                # Cette approche contourne le probl√®me du r√¥le "system"
                response, _ = process_gemini_response(
                    enhanced_prompt, 
                    None,  # Pas d'historique pour contourner le probl√®me
                    image_base64
                )
            else:
                # Utiliser la fonction de d√©monstration si Gemini n'est pas disponible
                response = demo_response(prompt)
        
        # Afficher la visualisation si g√©n√©r√©e
        if generated_fig:
            response_with_viz = f"{response}\n\n"
            display_chat_message("assistant", response_with_viz)
            st.plotly_chart(generated_fig, use_container_width=True)
        else:
            display_chat_message("assistant", response)
        
        # Sauvegarder la r√©ponse dans l'historique
        st.session_state.messages.append({"role": "assistant", "content": response})
    
    # Sidebar avec des exemples de questions
    with st.sidebar:
        st.subheader("Exemples de questions")
        example_questions = [
            "Quelle est la r√©partition des donneurs par groupe sanguin?",
            "Quels sont les arrondissements avec le plus de donneurs?",
            "Comment se r√©partit l'√©ligibilit√© au don par tranche d'√¢ge?",
            "Quels sont les facteurs qui influencent le plus l'√©ligibilit√©?",
            "Quelles recommandations pour am√©liorer le taux de don chez les jeunes?",
            "Montre-moi l'√©volution des dons au fil du temps.",
            "Quelle est la distribution des donneurs par genre?"
        ]
        
        st.markdown("**Cliquez pour poser une question:**")
        for question in example_questions:
            if st.button(question, key=f"ex_{question[:20]}"):
                # Utiliser la session state pour injecter la question
                st.session_state.user_question = question
                st.rerun()
        
        # Utiliser la session state pour injecter la question
        if "user_question" in st.session_state:
            st.session_state.messages.append({"role": "user", "content": st.session_state.user_question})
            
            # G√©n√©rer la r√©ponse pour cette question
            response = demo_response(st.session_state.user_question)
            st.session_state.messages.append({"role": "assistant", "content": response})
            
            # Nettoyer apr√®s utilisation
            del st.session_state.user_question
            st.rerun()
        
        st.divider()
        st.subheader("Saviez-vous?")
        st.info(generate_blood_fact())
        
        # Options avanc√©es
        with st.expander("Options avanc√©es"):
            if st.button("R√©initialiser la conversation"):
                st.session_state.messages = []
                st.session_state.chat_history = []
                st.session_state.generated_visualizations = {}
                if "GEMINI_API_KEY" in st.session_state:
                    del st.session_state["GEMINI_API_KEY"]
                st.rerun()

if __name__ == "__main__":
    # Charger des donn√©es fictives pour les tests
    df = pd.read_csv('data/processed_data/dataset_don_sang_enrichi.csv', encoding='utf-8')
    assistant_ia(df)