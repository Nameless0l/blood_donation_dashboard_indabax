import io 
import os
import pickle
import folium
import tempfile
import base64
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from preprocessing import preprocess_data
from plotly.subplots import make_subplots
from streamlit_folium import folium_static
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from visualizations import (create_geographic_visualizations, create_health_condition_visualizations,
                            create_donor_profiling_visualizations, create_campaign_effectiveness_visualizations,
                            create_donor_retention_visualizations, create_sentiment_analysis_visualizations)
# Configuration de la page
st.set_page_config(
    page_title="Tableau de Bord - Campagne de Don de Sang",
    page_icon="ü©∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fonctions utilitaires
def load_data(file_path=None, uploaded_file=None):
    """
    Charge et pr√©traite les donn√©es du fichier Excel ou CSV
    
    Args:
        file_path (str, optional): Chemin vers le fichier par d√©faut
        uploaded_file (UploadedFile, optional): Fichier upload√© par l'utilisateur
        
    Returns:
        dict: Dictionnaire contenant les diff√©rents DataFrames pr√©trait√©s
    """
    # Si un fichier a √©t√© upload√©
    if uploaded_file is not None:
        # Cr√©er un fichier temporaire pour stocker le contenu upload√©
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx' if uploaded_file.name.endswith('.xlsx') else '.csv') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            temp_path = tmp_file.name
        
        # Pr√©traiter le fichier upload√©
        try:
            if uploaded_file.name.endswith('.csv'):
                # Pour les fichiers CSV, nous devons adapter le code de pr√©traitement
                # Charger le CSV dans un DataFrame pandas
                df = pd.read_csv(temp_path)
                
                # Utiliser le DataFrame pour cr√©er un dictionnaire simulant la structure attendue
                data_dict = {
                    'candidats': df,
                    'donneurs': df,  # Utiliser le m√™me DataFrame comme fallback
                    'candidats_age': df,
                    'combined': df
                }
                return data_dict
            else:
                # Pour les fichiers Excel, utiliser la fonction de pr√©traitement existante
                return preprocess_data(temp_path)
        except Exception as e:
            st.error(f"Erreur lors du pr√©traitement du fichier upload√©: {e}")
            return None
    
    # Si aucun fichier n'a √©t√© upload√©, utiliser le fichier par d√©faut
    elif file_path:
        if not os.path.exists('processed_data'):
            # Si les donn√©es pr√©trait√©es n'existent pas, les traiter et les sauvegarder
            data_dict = preprocess_data(file_path)
        else:
            # Sinon, charger les donn√©es pr√©trait√©es
            data_dict = {}
            for name in ['candidats', 'donneurs', 'candidats_age', 'combined']:
                csv_path = f"processed_data/{name}_processed.csv"
                if os.path.exists(csv_path):
                    data_dict[name] = pd.read_csv(csv_path)
        
        return data_dict
    
    return None

def train_eligibility_model(df):
    """
    Entra√Æne un mod√®le de pr√©diction d'√©ligibilit√© au don de sang
    """
    # V√©rifier si le mod√®le existe d√©j√†
    model_path = "model/eligibility_model.pkl"
    if os.path.exists(model_path):
        with open(model_path, 'rb') as f:
            model = pickle.load(f)
        return model
    
    # Cr√©er le r√©pertoire model s'il n'existe pas
    os.makedirs("model", exist_ok=True)
    
    # Pr√©parer les donn√©es pour l'entra√Ænement
    # S√©lectionner les caract√©ristiques pertinentes
    features = []
    
    # Caract√©ristiques d√©mographiques
    if 'age' in df.columns:
        features.append('age')
    
    if 'Genre' in df.columns:
        # Encoder le genre
        df['genre_code'] = df['Genre'].map({'Homme': 1, 'Femme': 0})
        features.append('genre_code')
    
    # Exp√©rience de don ant√©rieure
    if 'experience_don' in df.columns:
        features.append('experience_don')
    
    # Conditions de sant√© (indicateurs)
    health_indicators = [col for col in df.columns if '_indicateur' in col]
    features.extend(health_indicators)
    
    # Filtrer les lignes sans valeurs manquantes pour les caract√©ristiques s√©lectionn√©es
    model_df = df[features + ['eligibilite_code']].dropna()
    
    # V√©rifier si nous avons suffisamment de donn√©es
    if len(model_df) < 20:
        return None
    
    # Diviser en caract√©ristiques et cible
    X = model_df[features]
    y = model_df['eligibilite_code']
    
    # Convertir y en cat√©gories (√©ligible / non √©ligible)
    y_binary = (y == 1).astype(int)  # 1 pour √©ligible, 0 pour non √©ligible
    
    # Diviser en ensembles d'entra√Ænement et de test
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=42)
    
    # Entra√Æner un mod√®le RandomForest
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # √âvaluer le mod√®le
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    # Sauvegarder le mod√®le
    with open(model_path, 'wb') as f:
        pickle.dump(model, f)
    
    return model

def predict_eligibility(model, input_features):
    """
    Pr√©dit l'√©ligibilit√© au don de sang √† partir des caract√©ristiques d'entr√©e
    """
    if model is None:
        return "Mod√®le non disponible"
    
    # Faire la pr√©diction
    prediction = model.predict([input_features])[0]
    prediction_proba = model.predict_proba([input_features])[0]
    
    if prediction == 1:
        result = "√âligible"
        confidence = prediction_proba[1] * 100
    else:
        result = "Non √©ligible"
        confidence = prediction_proba[0] * 100
    
    return result, confidence

def get_feature_importance(model, feature_names):
    """
    Retourne l'importance des caract√©ristiques du mod√®le
    """
    if model is None:
        return None
    
    importances = model.feature_importances_
    feature_importance = pd.DataFrame({
        'Feature': feature_names,
        'Importance': importances
    }).sort_values('Importance', ascending=False)
    
    return feature_importance

def download_link(object_to_download, download_filename, download_link_text):
    """
    G√©n√®re un lien pour t√©l√©charger un objet
    """
    if isinstance(object_to_download, pd.DataFrame):
        object_to_download = object_to_download.to_csv(index=False)
    
    # Cr√©er un lien de t√©l√©chargement temporaire
    b64 = base64.b64encode(object_to_download.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{download_filename}">{download_link_text}</a>'
    
    return href

# Interface principale
def main():
    st.markdown("""
    <style>
    .sidebar .sidebar-content {
        background-color: #262730;
    }
    
    .sidebar .sidebar-content .block-container {
        padding-top: 1rem;
    }
    
    /* Style pour les titres de la sidebar */
    .sidebar .sidebar-content h1, 
    .sidebar .sidebar-content h2,
    .sidebar .sidebar-content h3 {
        color: white;
        font-weight: 600;
    }
    
    /* Style pour les widgets de filtre */
    .sidebar .sidebar-content .stSlider {
        padding-top: 1rem;
        padding-bottom: 1.5rem;
    }
    
    .sidebar .sidebar-content .stSlider > div {
        padding-left: 0;
        padding-right: 0;
    }
    
    /* Bo√Æte d'information du nombre de donneurs */
    .info-box {
        background-color: #2c3e50;
        color: white;
        padding: 15px;
        border-radius: 5px;
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    
    /* Style pour les select boxes */
    .sidebar .sidebar-content .stSelectbox > div > div {
        background-color: #262730;
        color: white;
        border: 1px solid #4e5d6c;
        border-radius: 4px;
    }
    </style>
    """, unsafe_allow_html=True)
    # Titre et introduction
    st.title("ü©∏ Tableau de Bord de la Campagne de Don de Sang")
    
    st.markdown("""
    Ce tableau de bord vous permet d'analyser les donn√©es des campagnes de don de sang pour optimiser vos futures initiatives.
    Explorez les diff√©rentes sections pour d√©couvrir des insights sur la r√©partition g√©ographique des donneurs,
    l'impact des conditions de sant√© sur l'√©ligibilit√©, le profil des donneurs id√©aux, l'efficacit√© des campagnes,
    et les facteurs de fid√©lisation des donneurs.
    """)
    
    uploaded_file = st.sidebar.file_uploader("Charger un fichier de donn√©es", type=['xlsx', 'csv'])
    
    if uploaded_file:
        st.sidebar.success(f"Fichier '{uploaded_file.name}' charg√© avec succ√®s!")
    
    # Charger les donn√©es (soit depuis le fichier upload√©, soit depuis le fichier par d√©faut)
    file_path = "Updated Challenge dataset.xlsx"
    data_dict = load_data(file_path, uploaded_file)
    st.sidebar.title("Navigation")
    # Options de navigation (maintenant avant les filtres)
    section = st.sidebar.radio(
        "Choisissez une section :",
        [
            "üìç R√©partition G√©ographique",
            "üè• Conditions de Sant√© & √âligibilit√©",
            "üî¨ Profilage des Donneurs",
            "üìä Efficacit√© des Campagnes",
            "üîÑ Fid√©lisation des Donneurs",
            "üí¨ Analyse de Sentiment",
            "ü§ñ Pr√©diction d'√âligibilit√©"
        ]
    )
    
    # Section de filtres (d√©plac√©e apr√®s les options de navigation)
    st.sidebar.header("Filtres")
    
    # Variables pour stocker les donn√©es filtr√©es
    filtered_data = None
    donneurs_apres_filtrage = 0
    
    if data_dict and 'candidats' in data_dict:
        df = data_dict['candidats']
        
        # 1. Filtre d'arrondissement
        arrondissements = ['Tous']
        if 'arrondissement_clean' in df.columns:
            arrond_list = df['arrondissement_clean'].dropna().unique()
            arrondissements.extend(sorted(arrond_list))
        
        selected_arrondissement = st.sidebar.selectbox("Arrondissement", arrondissements)
        
        # 2. Filtre de tranche d'√¢ge
        age_min, age_max = 0, 63
        if 'age' in df.columns:
            age_min = int(df['age'].min()) if not pd.isna(df['age'].min()) else 0
            age_max = int(df['age'].max()) if not pd.isna(df['age'].max()) else 63
        
        age_range = st.sidebar.slider("Tranche d'√¢ge", min_value=age_min, max_value=age_max, value=(age_min, age_max))
        
        # 3. Filtre de sexe
        genres = ['Tous']
        if 'Genre' in df.columns:
            genre_list = df['Genre'].dropna().unique()
            genres.extend(sorted(genre_list))
        
        selected_genre = st.sidebar.selectbox("Sexe", genres)
        
        # Appliquer les filtres
        filtered_data = df.copy()
        
        # Filtre d'arrondissement
        if selected_arrondissement != 'Tous' and 'arrondissement_clean' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['arrondissement_clean'] == selected_arrondissement]
        
        # Filtre d'√¢ge
        if 'age' in filtered_data.columns:
            filtered_data = filtered_data[(filtered_data['age'] >= age_range[0]) & (filtered_data['age'] <= age_range[1])]
        
        # Filtre de sexe
        if selected_genre != 'Tous' and 'Genre' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['Genre'] == selected_genre]
        
        # Mettre √† jour le dictionnaire de donn√©es avec les donn√©es filtr√©es
        data_dict['candidats'] = filtered_data
        
        # Calculer le nombre de donneurs apr√®s filtrage
        donneurs_apres_filtrage = len(filtered_data)
        
        # Afficher le nombre de donneurs apr√®s filtrage
        st.sidebar.markdown(
            f"""
            <div style='background-color: #2c3e50; color: white; padding: 15px; border-radius: 5px;'>
            <b>Nombre de donneurs apr√®s filtrage:</b><br>
            {donneurs_apres_filtrage}
            </div>
            """, 
            unsafe_allow_html=True
        )
    
    try:
        if data_dict:
            # Cr√©er un mod√®le de pr√©diction
            model = train_eligibility_model(data_dict['candidats'])
            
            # Afficher la section s√©lectionn√©e
            if section == "üìç R√©partition G√©ographique":
                show_geographic_distribution(data_dict)
            elif section == "üè• Conditions de Sant√© & √âligibilit√©":
                show_health_conditions(data_dict)
            elif section == "üî¨ Profilage des Donneurs":
                show_donor_profiling(data_dict)
            elif section == "üìä Efficacit√© des Campagnes":
                show_campaign_effectiveness(data_dict)
            elif section == "üîÑ Fid√©lisation des Donneurs":
                show_donor_retention(data_dict)
            elif section == "üí¨ Analyse de Sentiment":
                show_sentiment_analysis(data_dict)
            elif section == "ü§ñ Pr√©diction d'√âligibilit√©":
                show_eligibility_prediction(data_dict, model)
        else:
            st.error("Aucune donn√©e n'a pu √™tre charg√©e. Veuillez uploader un fichier valide ou v√©rifier le fichier par d√©faut.")
    
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du chargement ou du traitement des donn√©es : {e}")
        st.info("Veuillez v√©rifier que le fichier est accessible et correctement format√©.")
def show_geographic_distribution(data_dict):
    """Affiche la section de r√©partition g√©ographique des donneurs"""
    st.header("üìç Cartographie de la R√©partition des Donneurs")
    
    st.markdown("""
    Cette section vous permet de visualiser la r√©partition g√©ographique des donneurs de sang
    en fonction de leur lieu de r√©sidence.
    """)
    
    # Cr√©er les visualisations g√©ographiques
    geo_figures = create_geographic_visualizations(data_dict['candidats'])
    
    # Afficher les visualisations
    col1, col2 = st.columns(2)
    
    with col1:
        if 'arrondissement_bar' in geo_figures:
            st.plotly_chart(geo_figures['arrondissement_bar'], use_container_width=True)
    
    with col2:
        if 'quartier_bar' in geo_figures:
            st.plotly_chart(geo_figures['quartier_bar'], use_container_width=True)
    
    if 'arrond_eligibility_heatmap' in geo_figures:
        st.plotly_chart(geo_figures['arrond_eligibility_heatmap'], use_container_width=True)
    
    # Carte interactive (si les coordonn√©es sont disponibles)
    st.subheader("Carte Interactive des Donneurs")
    
    st.info("""
    Note: Une carte interactive montrant la r√©partition exacte des donneurs n√©cessiterait des donn√©es
    g√©ographiques suppl√©mentaires (coordonn√©es). Pour une impl√©mentation compl√®te, vous pourriez:
    
    1. Utiliser une API de g√©ocodage pour convertir les arrondissements et quartiers en coordonn√©es
    2. Cr√©er une carte choropl√®the montrant la densit√© des donneurs par zone
    3. Ajouter des marqueurs interactifs pour chaque site de collecte
    """)
    
    # Exemple de carte choropl√®the simplifi√©e (utilisant des donn√©es fictives)
    m = folium.Map(location=[4.0511, 9.7679], zoom_start=11)  # Coordonn√©es approximatives de Douala
    
    # Ajouter un titre √† la carte
    title_html = '''
        <h3 align="center" style="font-size:16px"><b>R√©partition des Donneurs √† Douala</b></h3>
    '''
    m.get_root().html.add_child(folium.Element(title_html))
    
    # Ajouter des marqueurs fictifs pour les principaux arrondissements
    arrondissements_coords = {
        'Douala 1': [4.0494, 9.7143],
        'Douala 2': [4.0611, 9.7179],
        'Douala 3': [4.0928, 9.7679],
        'Douala 4': [4.0711, 9.7543],
        'Douala 5': [4.0128, 9.7379]
    }
    
    # Extraire les donn√©es d'arrondissement
    if 'arrondissement_clean' in data_dict['candidats'].columns:
        arrond_counts = data_dict['candidats']['arrondissement_clean'].value_counts().to_dict()
        
        for arrond, coords in arrondissements_coords.items():
            count = arrond_counts.get(arrond, 0)
            popup_text = f"<b>{arrond}</b><br>Nombre de donneurs: {count}"
            
            # Ajuster la taille du cercle en fonction du nombre de donneurs
            radius = 500 + (count / 10)
            
            folium.Circle(
                location=coords,
                radius=radius,
                popup=popup_text,
                color='crimson',
                fill=True,
                fill_color='crimson',
                fill_opacity=0.6
            ).add_to(m)
    
    # Afficher la carte
    folium_static(m)
    
    # Insights et recommandations
    st.subheader("Insights & Recommandations")
    
    st.markdown("""
    **Principaux insights :**
    - La majorit√© des donneurs sont concentr√©s dans Douala 3, suivi par Douala 5
    - Certains quartiers montrent une participation beaucoup plus √©lev√©e que d'autres
    
    **Recommandations :**
    - Intensifier les campagnes dans les zones √† faible participation
    - √âtudier les facteurs de succ√®s dans les quartiers √† forte participation pour les reproduire ailleurs
    - Mettre en place des unit√©s mobiles de collecte dans les zones √©loign√©es des centres de don
    """)

def show_health_conditions(data_dict):
    """Affiche la section sur les conditions de sant√© et l'√©ligibilit√©"""
    st.header("üè• Conditions de Sant√© & √âligibilit√©")
    
    st.markdown("""
    Cette section analyse l'impact des conditions de sant√© sur l'√©ligibilit√© au don de sang.
    Les visualisations ci-dessous vous permettent de comprendre quelles conditions m√©dicales
    influencent le plus l'√©ligibilit√© des donneurs.
    """)
    
    # Cr√©er les visualisations sur les conditions de sant√©
    health_figures = create_health_condition_visualizations(data_dict['candidats'])
    
    # Afficher les visualisations
    if 'health_impact_bar' in health_figures:
        st.plotly_chart(health_figures['health_impact_bar'], use_container_width=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if 'health_condition_correlation' in health_figures:
            st.plotly_chart(health_figures['health_condition_correlation'], use_container_width=True)
    
    with col2:
        if 'ineligibility_reasons_pie' in health_figures:
            st.plotly_chart(health_figures['ineligibility_reasons_pie'], use_container_width=True)
    
    # Statistiques sur l'√©ligibilit√©
    st.subheader("Statistiques d'√âligibilit√©")
    
    if '√âLIGIBILIT√â AU DON.' in data_dict['candidats'].columns:
        eligibility_counts = data_dict['candidats']['√âLIGIBILIT√â AU DON.'].value_counts()
        eligibility_percentage = eligibility_counts / eligibility_counts.sum() * 100
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                label="Donneurs √âligibles",
                value=f"{eligibility_counts.get('Eligible', 0):,}",
                delta=f"{eligibility_percentage.get('Eligible', 0):.1f}%"
            )
        
        with col2:
            st.metric(
                label="Temporairement Non-√©ligibles",
                value=f"{eligibility_counts.get('Temporairement Non-eligible', 0):,}",
                delta=f"{eligibility_percentage.get('Temporairement Non-eligible', 0):.1f}%"
            )
        
        with col3:
            st.metric(
                label="D√©finitivement Non-√©ligibles",
                value=f"{eligibility_counts.get('D√©finitivement non-eligible', 0):,}",
                delta=f"{eligibility_percentage.get('D√©finitivement non-eligible', 0):.1f}%"
            )
    
    # Insights et recommandations
    st.subheader("Insights & Recommandations")
    
    st.markdown("""
    **Principaux insights :**
    - Les porteurs du VIH, de l'h√©patite B ou C sont syst√©matiquement non-√©ligibles
    - L'hypertension et le diab√®te impactent significativement l'√©ligibilit√©
    - Les donneurs avec des ant√©c√©dents d'asthme peuvent g√©n√©ralement donner sous certaines conditions
    
    **Recommandations :**
    - Mettre en place des campagnes d'information cibl√©es sur les crit√®res d'√©ligibilit√©
    - Offrir des alternatives de contribution pour les personnes d√©finitivement non-√©ligibles
    - Former le personnel m√©dical pour mieux √©valuer les cas limites, notamment pour l'asthme et l'hypertension l√©g√®re
    """)

def show_donor_profiling(data_dict):
    """Affiche la section sur le profilage des donneurs id√©aux"""
    st.header("üî¨ Profilage des Donneurs Id√©aux")
    
    st.markdown("""
    Cette section utilise des techniques d'analyse de donn√©es avanc√©es pour identifier
    les caract√©ristiques communes des donneurs de sang id√©aux. Cela vous aidera √† cibler
    vos campagnes vers les populations les plus susceptibles de donner.
    """)
    
    # Cr√©er les visualisations de profilage des donneurs
    profiling_figures = create_donor_profiling_visualizations(data_dict['candidats'])
    
    # Afficher les visualisations
    col1, col2 = st.columns(2)
    
    with col1:
        if 'age_eligibility_bar' in profiling_figures:
            st.plotly_chart(profiling_figures['age_eligibility_bar'], use_container_width=True)
    
    with col2:
        if 'gender_eligibility_bar' in profiling_figures:
            st.plotly_chart(profiling_figures['gender_eligibility_bar'], use_container_width=True)
    
    # Clustering des donneurs
    st.subheader("Clustering des Donneurs")
    
    if 'donor_clustering' in profiling_figures:
        st.plotly_chart(profiling_figures['donor_clustering'], use_container_width=True)
    
    if 'cluster_profiles_radar' in profiling_figures:
        st.plotly_chart(profiling_figures['cluster_profiles_radar'], use_container_width=True)
    
    # Caract√©ristiques du donneur id√©al
    st.subheader("Caract√©ristiques du Donneur Id√©al")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Profil d√©mographique :**
        - **√Çge :** 26-45 ans
        - **Genre :** Hommes l√©g√®rement plus susceptibles d'√™tre √©ligibles
        - **√âtat civil :** Les personnes mari√©es montrent un taux d'√©ligibilit√© plus √©lev√©
        - **Niveau d'√©ducation :** Niveau universitaire associ√© √† une meilleure connaissance des crit√®res d'√©ligibilit√©
        """)
    
    with col2:
        st.markdown("""
        **Facteurs comportementaux :**
        - **Exp√©rience de don :** Les donneurs r√©guliers ont un taux d'√©ligibilit√© plus √©lev√©
        - **Intervalle entre les dons :** Respect optimal de 3 √† 6 mois entre les dons
        - **Sensibilisation :** Participation √† des campagnes d'information pr√©alables
        - **Mode de vie :** Alimentation √©quilibr√©e et activit√© physique r√©guli√®re
        """)
    
    # Insights et recommandations
    st.subheader("Insights & Recommandations")
    
    st.markdown("""
    **Principaux insights :**
    - Les clusters identifi√©s montrent des profils distincts de donneurs avec diff√©rents taux d'√©ligibilit√©
    - L'√¢ge et l'exp√©rience de don ant√©rieure sont les facteurs les plus d√©terminants pour pr√©dire l'√©ligibilit√©
    - Les hommes entre 26 et 45 ans constituent le groupe d√©mographique le plus fiable pour les dons r√©guliers
    
    **Recommandations :**
    - Cibler prioritairement les groupes √† haut taux d'√©ligibilit√© pour maximiser l'efficacit√© des campagnes
    - Organiser des campagnes sp√©cifiques pour les groupes sous-repr√©sent√©s mais √† fort potentiel
    - Mettre en place des programmes de sensibilisation adapt√©s √† chaque cluster de donneurs
    """)

def show_campaign_effectiveness(data_dict):
    """Affiche la section sur l'efficacit√© des campagnes"""
    st.header("üìä Analyse de l'Efficacit√© des Campagnes")
    
    st.markdown("""
    Cette section analyse les r√©sultats des campagnes pass√©es pour identifier
    les p√©riodes optimales et les facteurs de succ√®s. Ces informations vous aideront
    √† planifier vos futures campagnes pour maximiser les collectes.
    """)
    
    # Cr√©er les visualisations d'efficacit√© des campagnes
    campaign_figures = create_campaign_effectiveness_visualizations(
        data_dict['candidats'],
        data_dict.get('donneurs')
    )
    
    # Afficher les visualisations
    if 'monthly_donations_line' in campaign_figures:
        st.plotly_chart(campaign_figures['monthly_donations_line'], use_container_width=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if 'average_monthly_donations' in campaign_figures:
            st.plotly_chart(campaign_figures['average_monthly_donations'], use_container_width=True)
    
    with col2:
        if 'weekly_donations' in campaign_figures:
            st.plotly_chart(campaign_figures['weekly_donations'], use_container_width=True)
    
    # Analyse par caract√©ristiques d√©mographiques
    st.subheader("Contribution par Groupe D√©mographique")
    
    demographic_cols = ['groupe_age', 'Genre', 'Profession']
    for col in demographic_cols:
        fig_key = f'{col}_donations'
        if fig_key in campaign_figures:
            st.plotly_chart(campaign_figures[fig_key], use_container_width=True)
    
    # Insights et recommandations
    st.subheader("Insights & Recommandations")
    
    st.markdown("""
    **Principaux insights :**
    - Les mois d'avril, ao√ªt et d√©cembre montrent g√©n√©ralement une participation plus √©lev√©e
    - Le milieu de semaine (mardi √† jeudi) est plus propice aux dons que le week-end
    - Certaines professions comme les √©tudiants, les enseignants et les professionnels de la sant√© sont surrepr√©sent√©es
    
    **Recommandations :**
    - Planifier des campagnes majeures durant les p√©riodes de forte participation (avril, ao√ªt, d√©cembre)
    - Organiser les collectes principalement en milieu de semaine
    - Cibler des lieux fr√©quent√©s par les groupes d√©mographiques les plus contributeurs
    - Diversifier les approches pour atteindre des groupes professionnels sous-repr√©sent√©s
    """)

def show_donor_retention(data_dict):
    """Affiche la section sur la fid√©lisation des donneurs"""
    st.header("üîÑ Fid√©lisation des Donneurs")
    
    st.markdown("""
    Cette section analyse les facteurs qui influencent le retour des donneurs
    et propose des strat√©gies pour am√©liorer leur fid√©lisation. Un donneur r√©gulier
    est beaucoup plus pr√©cieux qu'un donneur occasionnel.
    """)
    
    # Cr√©er les visualisations de fid√©lisation des donneurs
    retention_figures = create_donor_retention_visualizations(data_dict['candidats'])
    
    # Afficher les visualisations
    if 'donor_experience_pie' in retention_figures:
        st.plotly_chart(retention_figures['donor_experience_pie'], use_container_width=True)
    
    # Afficher les facteurs influen√ßant le retour des donneurs
    st.subheader("Facteurs Influen√ßant le Retour des Donneurs")
    
    retention_factors = ['Genre', 'groupe_age', 'arrondissement_clean']
    for factor in retention_factors:
        fig_key = f'{factor}_retention'
        if fig_key in retention_figures:
            st.plotly_chart(retention_figures[fig_key], use_container_width=True)
    
    # Analyse du temps entre les dons
    if 'time_since_donation_hist' in retention_figures:
        st.plotly_chart(retention_figures['time_since_donation_hist'], use_container_width=True)
    
    if 'time_eligibility_bar' in retention_figures:
        st.plotly_chart(retention_figures['time_eligibility_bar'], use_container_width=True)
    
    # Strat√©gies de fid√©lisation
    st.subheader("Strat√©gies de Fid√©lisation")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Communication et reconnaissance :**
        - Envoyer des rappels personnalis√©s quand le donneur devient √† nouveau √©ligible
        - Cr√©er un syst√®me de reconnaissance pour les donneurs r√©guliers (badges, certificats)
        - Partager des t√©moignages de b√©n√©ficiaires pour renforcer l'impact √©motionnel
        """)
    
    with col2:
        st.markdown("""
        **Am√©lioration de l'exp√©rience :**
        - R√©duire les temps d'attente lors des collectes
        - Offrir un suivi de sant√© aux donneurs r√©guliers
        - Organiser des √©v√©nements sp√©ciaux pour les donneurs fid√®les
        - Faciliter la prise de rendez-vous en ligne
        """)
    
    # Insights et recommandations
    st.subheader("Insights & Recommandations")
    
    st.markdown("""
    **Principaux insights :**
    - Environ 42% des candidats sont des donneurs r√©currents
    - Le taux de fid√©lisation varie significativement selon l'arrondissement de r√©sidence
    - Les donneurs √¢g√©s de 26 √† 45 ans montrent les meilleurs taux de fid√©lisation
    - L'intervalle moyen entre deux dons est d'environ 12 mois (bien au-del√† des 3 mois minimum requis)
    
    **Recommandations :**
    - Mettre en place un programme de fid√©lisation structur√© avec des avantages progressifs
    - Cibler prioritairement les donneurs ayant d√©j√† donn√© il y a plus de 3-4 mois
    - Organiser des campagnes sp√©cifiques dans les zones √† faible taux de fid√©lisation
    - √âduquer les donneurs sur la fr√©quence optimale des dons (tous les 3-4 mois)
    """)

def show_sentiment_analysis(data_dict):
    """Affiche la section d'analyse de sentiment des retours"""
    st.header("üí¨ Analyse de Sentiment des Retours")
    
    st.markdown("""
    Cette section analyse les retours textuels des donneurs pour comprendre
    leur satisfaction et identifier des axes d'am√©lioration. Cette analyse
    vous aidera √† perfectionner l'exp√©rience des donneurs.
    """)
    
    # Cr√©er les visualisations d'analyse de sentiment
    sentiment_figures = create_sentiment_analysis_visualizations(data_dict['candidats'])
    
    if sentiment_figures:
        # Afficher les visualisations
        col1, col2 = st.columns(2)
        
        with col1:
            if 'sentiment_pie' in sentiment_figures:
                st.plotly_chart(sentiment_figures['sentiment_pie'], use_container_width=True)
        
        with col2:
            if 'sentiment_time_line' in sentiment_figures:
                st.plotly_chart(sentiment_figures['sentiment_time_line'], use_container_width=True)
        
        # Afficher des exemples de retours
        st.subheader("Exemples de Retours")
        
        st.info("""
        Note: Pour une impl√©mentation compl√®te, vous devriez extraire des exemples r√©els
        de retours textuels du jeu de donn√©es. Voici quelques exemples illustratifs:
        """)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            **Retours positifs:**
            > "Personnel tr√®s accueillant et professionnel."
            
            > "Processus efficace et rapide, je reviendrai!"
            
            > "Tr√®s satisfait de l'exp√©rience globale."
            """)
        
        with col2:
            st.markdown("""
            **Retours neutres:**
            > "Proc√©dure standard, rien √† signaler."
            
            > "L'attente √©tait raisonnable."
            
            > "J'aurais appr√©ci√© plus d'informations sur l'utilisation du sang."
            """)
        
        with col3:
            st.markdown("""
            **Retours n√©gatifs:**
            > "Temps d'attente trop long avant d'√™tre pris en charge."
            
            > "Le lieu √©tait difficile √† trouver sans indication claire."
            
            > "Peu de suivi apr√®s le don, sentiment d'abandon."
            """)
    else:
        st.warning("""
        Donn√©es textuelles insuffisantes pour r√©aliser une analyse de sentiment.
        Pour impl√©menter cette fonctionnalit√©, il faudrait:
        
        1. Collecter plus de retours textuels des donneurs via des questionnaires
        2. Utiliser des biblioth√®ques Python comme NLTK ou TextBlob pour l'analyse de sentiment
        3. Cr√©er des visualisations montrant l'√©volution des opinions au fil du temps
        """)
    
    # Insights et recommandations
    st.subheader("Insights & Recommandations")
    
    st.markdown("""
    **Principaux points de satisfaction :**
    - Professionnalisme et gentillesse du personnel m√©dical
    - Sentiment d'accomplissement apr√®s le don
    - Connaissance de son groupe sanguin et statut de sant√©
    
    **Principaux points d'insatisfaction :**
    - Temps d'attente parfois long
    - Manque d'information sur l'utilisation du sang collect√©
    - Accessibilit√© limit√©e des lieux de collecte
    
    **Recommandations :**
    - Optimiser les flux de travail pour r√©duire les temps d'attente
    - Am√©liorer la communication sur l'impact des dons
    - Mettre en place un syst√®me de feedback syst√©matique apr√®s chaque don
    - Former le personnel √† mieux g√©rer les pr√©occupations des donneurs
    """)

def show_eligibility_prediction(data_dict, model):
    """Affiche la section de pr√©diction d'√©ligibilit√©"""
    st.header("ü§ñ Mod√®le de Pr√©diction d'√âligibilit√©")
    
    st.markdown("""
    Cette section vous permet de pr√©dire l'√©ligibilit√© d'un potentiel donneur
    en fonction de ses caract√©ristiques d√©mographiques et de sant√©. Cet outil
    peut √™tre utilis√© pour le pr√©-screening avant les campagnes.
    """)
    
    if model is None:
        st.warning("""
        Le mod√®le de pr√©diction n'a pas pu √™tre cr√©√© en raison de donn√©es insuffisantes.
        Pour impl√©menter cette fonctionnalit√©, il faudrait:
        
        1. Collecter plus de donn√©es sur les donneurs et leur √©ligibilit√©
        2. Entra√Æner un mod√®le d'apprentissage automatique avec ces donn√©es
        3. D√©ployer le mod√®le via une API pour l'utiliser en temps r√©el
        """)
        return
    
    # Interface de pr√©diction
    st.subheader("Pr√©diction d'√âligibilit√©")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Caract√©ristiques d√©mographiques
        st.markdown("**Caract√©ristiques d√©mographiques**")
        
        age = st.slider("√Çge", 18, 70, 35)
        genre = st.radio("Genre", ["Homme", "Femme"])
        already_donated = st.radio("A d√©j√† donn√© du sang ?", ["Oui", "Non"])
        
        # Convertir en format num√©rique
        genre_code = 1 if genre == "Homme" else 0
        experience_don = 1 if already_donated == "Oui" else 0
    
    with col2:
        # Conditions de sant√©
        st.markdown("**Conditions de sant√©**")
        
        hiv_hbs_hcv = st.checkbox("Porteur de VIH, h√©patite B ou C")
        diabete = st.checkbox("Diab√©tique")
        hypertension = st.checkbox("Hypertendu")
        asthme = st.checkbox("Asthmatique")
        drepano = st.checkbox("Dr√©panocytaire")
        cardiaque = st.checkbox("Probl√®mes cardiaques")
    
    # Pr√©parer les caract√©ristiques d'entr√©e pour le mod√®le
    input_features = []
    
    # L'ordre des caract√©ristiques doit correspondre √† celui utilis√© lors de l'entra√Ænement
    if 'age' in data_dict['candidats'].columns:
        input_features.append(age)
    
    if 'Genre' in data_dict['candidats'].columns:
        input_features.append(genre_code)
    
    if 'experience_don' in data_dict['candidats'].columns:
        input_features.append(experience_don)
    
    # Conditions de sant√©
    health_conditions = {
        "Porteur(HIV,hbs,hcv)_indicateur": 1 if hiv_hbs_hcv else 0,
        "Diab√©tique_indicateur": 1 if diabete else 0,
        "Hypertendus_indicateur": 1 if hypertension else 0,
        "Asthmatiques_indicateur": 1 if asthme else 0,
        "Drepanocytaire_indicateur": 1 if drepano else 0,
        "Cardiaque_indicateur": 1 if cardiaque else 0
    }
    
    # Ajouter les conditions de sant√© pr√©sentes dans les donn√©es d'entra√Ænement
    for condition in ["Porteur(HIV,hbs,hcv)_indicateur", "Diab√©tique_indicateur", 
                      "Hypertendus_indicateur", "Asthmatiques_indicateur",
                      "Drepanocytaire_indicateur", "Cardiaque_indicateur"]:
        if condition in data_dict['candidats'].columns:
            input_features.append(health_conditions[condition])
    
    # Bouton de pr√©diction
    if st.button("Pr√©dire l'√©ligibilit√©"):
        # Faire la pr√©diction
        result, confidence = predict_eligibility(model, input_features)
        
        # Afficher le r√©sultat
        if result == "√âligible":
            st.success(f"Pr√©diction : {result} (Confiance : {confidence:.1f}%)")
        else:
            st.error(f"Pr√©diction : {result} (Confiance : {confidence:.1f}%)")
        
        # Afficher une explication
        st.subheader("Explication de la pr√©diction")
        
        # Obtenir l'importance des caract√©ristiques
        feature_names = []
        if 'age' in data_dict['candidats'].columns:
            feature_names.append("√Çge")
        
        if 'Genre' in data_dict['candidats'].columns:
            feature_names.append("Genre")
        
        if 'experience_don' in data_dict['candidats'].columns:
            feature_names.append("Exp√©rience de don")
        
        for condition in ["Porteur(HIV,hbs,hcv)_indicateur", "Diab√©tique_indicateur", 
                          "Hypertendus_indicateur", "Asthmatiques_indicateur",
                          "Drepanocytaire_indicateur", "Cardiaque_indicateur"]:
            if condition in data_dict['candidats'].columns:
                feature_names.append(condition.replace("_indicateur", ""))
        
        feature_importance = get_feature_importance(model, feature_names)
        
        if feature_importance is not None:
            # Cr√©er un graphique d'importance des caract√©ristiques
            fig = px.bar(
                feature_importance,
                x='Importance',
                y='Feature',
                orientation='h',
                title="Importance des caract√©ristiques dans la pr√©diction",
                color='Importance',
                color_continuous_scale=px.colors.sequential.Blues
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Fournir une explication textuelle
            top_factors = feature_importance.head(3)['Feature'].tolist()
            
            st.markdown(f"""
            Les facteurs les plus influents dans cette pr√©diction sont: **{", ".join(top_factors)}**.
            
            {"Pour augmenter vos chances d'√©ligibilit√©, consultez un professionnel de sant√© pour discuter des facteurs de risque identifi√©s." if result == "Non √©ligible" else "Votre profil correspond √† celui d'un donneur √©ligible typique."}
            """)
    
    # API Documentation
    st.subheader("Documentation de l'API")
    
    st.markdown("""
    Ce mod√®le de pr√©diction peut √™tre int√©gr√© √† votre site web ou application via une API REST.
    
    **Endpoint:** `/api/predict_eligibility`
    
    **M√©thode:** POST
    
    **Format de requ√™te:**
    ```json
    {
        "age": 35,
        "genre": "Homme",
        "experience_don": 1,
        "conditions_sante": {
            "vih_hbs_hcv": 0,
            "diabete": 0,
            "hypertension": 0,
            "asthme": 0,
            "drepanocytaire": 0,
            "cardiaque": 0
        }
    }
    ```
    
    **Format de r√©ponse:**
    ```json
    {
        "prediction": "√âligible",
        "confidence": 92.5,
        "facteurs_importants": ["√Çge", "Exp√©rience de don", "Genre"]
    }
    ```
    
    Pour impl√©menter cette API, vous pouvez utiliser Flask ou FastAPI en Python.
    """)

if __name__ == "__main__":
    main()