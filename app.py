import io 
import os
import base64
import folium
import joblib
import tempfile
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from function.preprocessing import preprocess_data
from plotly.subplots import make_subplots
from streamlit_folium import folium_static
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from function.page_assistant_ia import assistant_ia
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, classification_report
from function.utils import get_emoji_size
from function.visualizations import (create_geographic_visualizations, create_health_condition_visualizations,
                            create_campaign_effectiveness_visualizations,
                            create_donor_retention_visualizations, create_sentiment_analysis_visualizations)
from function.page_analyse_eligibilite import(display_profession_eligibility,display_ineligibility_reasons,get_available_health_indicators)
from function.page_analyse_donneurs import (analyse_donneurs)
# Configuration de la page
st.set_page_config(
    page_title="Tableau de Bord - Campagne de Don de Sang",
    page_icon="ü©∏",
    layout="wide",
    initial_sidebar_state="expanded"
)
df_ = pd.read_csv('data/processed_data/dataset_don_sang_enrichi.csv', encoding='utf-8')
raisons_temp = [
        "Raison indisponibilit√©  [Est sous anti-bioth√©rapie  ]",
        "Raison indisponibilit√©  [Taux d'h√©moglobine bas ]",
        "Raison indisponibilit√©  [date de dernier Don < 3 mois ]",
        "Raison indisponibilit√©  [IST r√©cente (Exclu VIH, Hbs, Hcv)]",
        "Raison de l'indisponibilit√© de la femme [La DDR est mauvais si <14 jour avant le don]",
        "Raison de l'indisponibilit√© de la femme [Allaitement ]",
        "Raison de l'indisponibilit√© de la femme [A accoucher ces 6 derniers mois  ]",
        "Raison de l'indisponibilit√© de la femme [Interruption de grossesse  ces 06 derniers mois]",
        "Raison de l'indisponibilit√© de la femme [est enceinte ]"
    ]
raisons_def = [
        "Raison de non-eligibilit√© totale  [Porteur(HIV,hbs,hcv)]",
        "Raison de non-eligibilit√© totale  [Op√©r√©]",
        "Raison de non-eligibilit√© totale  [Drepanocytaire]",
        "Raison de non-eligibilit√© totale  [Diab√©tique]",
        "Raison de non-eligibilit√© totale  [Hypertendus]",
        "Raison de non-eligibilit√© totale  [Asthmatiques]",
        "Raison de non-eligibilit√© totale  [Cardiaque]",
        "Raison de non-eligibilit√© totale  [Tatou√©]",
        "Raison de non-eligibilit√© totale  [Scarifi√©]"
    ]
    
# Fonctions utilitaires
def load_data(file_path=None, uploaded_file=None):
    """
    Charge et pr√©traite les donn√©es du fichier Excel ou CSV
    
    Args:
        file_path (str, optional): Chemin vers le fichier par d√©faut
        uploaded_file (UploadedFile, optional): Fichier upload√© par l'utilisateur
        
    Returns:
        dict: Dictionnaire contenant les diff√©rents DataFrames pr√©trait√©s
    """
    # Si un fichier a √©t√© upload√©
    if uploaded_file is not None:
        # Cr√©er un fichier temporaire pour stocker le contenu upload√©
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx' if uploaded_file.name.endswith('.xlsx') else '.csv') as tmp_file:
            tmp_file.write(uploaded_file.getvalue())
            temp_path = tmp_file.name
        
        # Pr√©traiter le fichier upload√©
        try:
            if uploaded_file.name.endswith('.csv'):
                # Pour les fichiers CSV, nous devons adapter le code de pr√©traitement
                # Charger le CSV dans un DataFrame pandas
                df = pd.read_csv(temp_path)
                
                # Utiliser le DataFrame pour cr√©er un dictionnaire simulant la structure attendue
                data_dict = {
                    'candidats': df,
                    'donneurs': df,  # Utiliser le m√™me DataFrame comme fallback
                    'candidats_age': df,
                    'combined': df
                }
                return data_dict
            else:
                # Pour les fichiers Excel, utiliser la fonction de pr√©traitement existante
                return preprocess_data(temp_path)
        except Exception as e:
            st.error(f"Erreur lors du pr√©traitement du fichier upload√©: {e}")
            return None
    
    # Si aucun fichier n'a √©t√© upload√©, utiliser le fichier par d√©faut
    elif file_path:
        if not os.path.exists('data/processed_data'):
            # Si les donn√©es pr√©trait√©es n'existent pas, les traiter et les sauvegarder
            data_dict = preprocess_data(file_path)
        else:
            # Sinon, charger les donn√©es pr√©trait√©es
            data_dict = {}
            for name in ['candidats', 'donneurs', 'candidats_age', 'combined']:
                csv_path = f"data/processed_data/{name}_processed.csv"
                if os.path.exists(csv_path):
                    data_dict[name] = pd.read_csv(csv_path)
        
        return data_dict
    
    return None

def train_eligibility_model(df):
    """
    Charge un mod√®le de pr√©diction d'√©ligibilit√© et pr√©pare les statistiques pour l'imputation
    """
    # Calculer les statistiques pour chaque colonne du DataFrame
    feature_stats = {}
    for col in df.columns:
        # Ignorer les colonnes d'√©ligibilit√©
        if col in ['eligibilite_code', '√âLIGIBILIT√â AU DON.']:
            continue
            
        # Pour les colonnes num√©riques
        if df[col].dtype in ['int64', 'float64']:
            mean_value = df[col].mean() if not pd.isna(df[col].mean()) else 0
            feature_stats[col] = {'type': 'numeric', 'fill_value': mean_value}
        # Pour les colonnes cat√©gorielles
        else:
            # Utiliser le mode (valeur la plus fr√©quente)
            if not df[col].mode().empty:
                mode_value = df[col].mode()[0]
            else:
                mode_value = "" if df[col].dtype == 'object' else 0
            feature_stats[col] = {'type': 'categorical', 'fill_value': mode_value}
    
    # Chemin du mod√®le
    model_path = "api/model/eligibility_model_gradient_boosting_20250323_104955.pkl"
    
    try:
        if os.path.exists(model_path):
            # Charger le mod√®le
            model = joblib.load(model_path)
            print(f"Mod√®le charg√© depuis: {model_path}")
            
            # Liste compl√®te des colonnes n√©cessaires (√† partir de l'erreur)
            required_columns = [
                # Colonnes d√©j√† identifi√©es
                'age', 'genre_code', 'experience_don',
                'porteur_vih_hbs_hcv', 'diabetique', 'hypertendu', 'asthmatique',
                'drepanocytaire', 'cardiaque', 'transfusion', 'tatoue', 'scarifie',
                'poids', 'taille', 'imc',
                
                # Colonnes manquantes identifi√©es dans l'erreur
                "Taux d\u2019h\u00e9moglobine", 'Nationalit√©', 'arrondissement_clean', 
                'Profession', 'A-t-il (elle) d√©j√† donn√© le sang', 'groupe_age',
                "Niveau d'etude", 'quartier_clean', 'Quartier de R√©sidence',
                'Religion', 'Situation Matrimoniale (SM)', 'Arrondissement de r√©sidence'
            ]
            
            # V√©rifier quelles colonnes sont r√©ellement pr√©sentes dans le DataFrame
            available_columns = [col for col in required_columns if col in df.columns]
            
            return model, required_columns, feature_stats
            
        else:
            # Mod√®le non trouv√©, retourner None
            st.error(f"Mod√®le non trouv√© √†: {model_path}")
            return None, [], feature_stats
            
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le: {e}")
        return None, [], feature_stats

def predict_eligibility(model, input_data, required_columns=None, feature_stats={}):
    """
    Pr√©dit l'√©ligibilit√© au don de sang en appliquant des r√®gles de s√©curit√© strictes
    """
    # V√©rifier les crit√®res d'exclusion absolus AVANT d'utiliser le mod√®le
    if isinstance(input_data, dict):
        # Crit√®res d'exclusion absolus
        if input_data.get('porteur_vih_hbs_hcv', 0) == 1:
            return "Non √©ligible", 100.0  # Confiance maximale pour raison de s√©curit√©
        
    elif isinstance(input_data, pd.DataFrame) and 'porteur_vih_hbs_hcv' in input_data.columns:
        if input_data['porteur_vih_hbs_hcv'].iloc[0] == 1:
            return "Non √©ligible", 100.0
    
    # Si aucun crit√®re d'exclusion absolu n'est trouv√©, continuer avec le mod√®le
    if model is None:
        return "Mod√®le non disponible", 0
    
    try:
        # Convertir en DataFrame si n√©cessaire
        if isinstance(input_data, dict):
            # Cr√©er un nouveau dictionnaire avec les cl√©s normalis√©es
            normalized_data = {}
            
            # Correspondance entre cl√©s courantes et cl√©s attendues
            key_mapping = {
                # Mappings standard
                "age": "age",
                "experience_don": "experience_don",
                "Genre": "Genre",
                "Niveau d'etude": "Niveau d'etude",
                "Situation Matrimoniale (SM)": "Situation Matrimoniale (SM)",
                "Profession": "Profession",
                "arrondissement_clean": "arrondissement_clean",
                "quartier_clean": "quartier_clean",
                "groupe_age": "groupe_age",
                
                # Mappings avec caract√®res accentu√©s et apostrophes sp√©cifiques
                "Arrondissement de r√©sidence": "Arrondissement de r√©sidence",
                "Quartier de R√©sidence": "Quartier de R√©sidence",
                "Nationalit√©": "Nationalit√©",
                "Religion": "Religion",
                "A-t-il (elle) d√©j√† donn√© le sang": "A-t-il (elle) d√©j√† donn√© le sang",
                
                # Cas particulier du taux d'h√©moglobine avec diff√©rentes apostrophes
                "Taux d\u2019h\u00e9moglobine": "Taux d\u2019h\u00e9moglobine",
                "Taux d\u2019h\u00e9moglobine": "Taux d\u2019h\u00e9moglobine",
                "Taux d\u2019h\u00e9moglobine": "Taux d\u2019h\u00e9moglobine",
                "Taux d\u2019h\u00e9moglobine": "Taux d\u2019h\u00e9moglobine",
                "Taux d\u2019h\u00e9moglobine": "Taux d\u2019h\u00e9moglobine",
                "Taux d\u2019h\u00e9moglobine": "Taux d\u2019h\u00e9moglobine"
            }
            
            # Transf√©rer les valeurs en utilisant les mappings
            for input_key, input_value in input_data.items():
                # Chercher une correspondance dans le mapping
                matched = False
                for pattern, target_key in key_mapping.items():
                    # Comparaison insensible aux diff√©rences d'apostrophes et d'accents
                    if pattern.lower().replace("'", "").replace("'", "").replace("√©", "e") == \
                       input_key.lower().replace("'", "").replace("'", "").replace("√©", "e"):
                        normalized_data[target_key] = input_value
                        matched = True
                        break
                
                # Si aucune correspondance trouv√©e, utiliser la cl√© originale
                if not matched:
                    normalized_data[input_key] = input_value
            
            # Cr√©er DataFrame avec les donn√©es normalis√©es
            input_df = pd.DataFrame([normalized_data])
        else:
            input_df = input_data
        
        # Si nous avons la liste des colonnes requises
        if required_columns:
            # Cr√©er un DataFrame pour la pr√©diction
            prediction_df = pd.DataFrame(index=input_df.index)
            
            # Pour chaque colonne requise
            for col in required_columns:
                if col in input_df.columns:
                    # Utiliser la valeur fournie
                    prediction_df[col] = input_df[col]
                else:
                    # Cas sp√©ciaux avec mappages directs
                    if col == "experience_don" and "A-t-il (elle) d√©j√† donn√© le sang" in input_df.columns:
                        prediction_df[col] = input_df["A-t-il (elle) d√©j√† donn√© le sang"].map({'Oui': 1, 'Non': 0})
                    
                    # Recherche par nom similaire (sans apostrophes/accents)
                    elif col.lower().replace("'", "").replace("√©", "e") in [
                        c.lower().replace("'", "").replace("√©", "e") for c in input_df.columns
                    ]:
                        # Trouver la colonne correspondante
                        for input_col in input_df.columns:
                            if input_col.lower().replace("'", "").replace("√©", "e") == \
                               col.lower().replace("'", "").replace("√©", "e"):
                                prediction_df[col] = input_df[input_col]
                                break
                    
                    # Imputer avec les statistiques
                    elif col in feature_stats:
                        prediction_df[col] = feature_stats[col]['fill_value']
                    
                    # Valeurs par d√©faut selon le type
                    else:
                        is_text_col = col in [
                            "Niveau d'etude", "Genre", "Situation Matrimoniale (SM)",
                            "Profession", "Arrondissement de r√©sidence", "Quartier de R√©sidence",
                            "Nationalit√©", "Religion", "A-t-il (elle) d√©j√† donn√© le sang",
                            "groupe_age", "arrondissement_clean", "quartier_clean"
                        ]
                        prediction_df[col] = "" if is_text_col else 0
            
            # Faire la pr√©diction
            prediction = model.predict(prediction_df)[0]
            print(prediction)
            probabilities = model.predict_proba(prediction_df)[0]
        else:
            # Utiliser le DataFrame tel quel
            prediction = model.predict(input_df)[0]
            probabilities = model.predict_proba(input_df)[0]
        
        # Interpr√©ter les r√©sultats
        if prediction == 1:
            result = "√âligible"
            confidence = probabilities[1] * 100
        else:
            result = "Non √©ligible"
            confidence = probabilities[0] * 100
        
        # V√âRIFICATION FINALE DES R√àGLES DE S√âCURIT√â
        # M√™me si le mod√®le pr√©dit "√âligible", certaines conditions doivent toujours rendre non √©ligible
        if result == "√âligible":
            # V√©rifier √† nouveau les crit√®res d'exclusion absolus
            if isinstance(input_data, dict):
                # Porteur de VIH/h√©patite
                if input_data.get('porteur_vih_hbs_hcv', 0) == 1:
                    return "Non √©ligible", 100.0
                
                # Autres conditions d'exclusion absolue
                if (input_data.get('drepanocytaire', 0) == 1 or 
                    input_data.get('cardiaque', 0) == 1):
                    return "Non √©ligible", 100.0
            
            elif isinstance(input_data, pd.DataFrame):
                # Porteur de VIH/h√©patite
                if 'porteur_vih_hbs_hcv' in input_data.columns and input_data['porteur_vih_hbs_hcv'].iloc[0] == 1:
                    return "Non √©ligible", 100.0
                
                # Autres conditions d'exclusion absolue
                if (('drepanocytaire' in input_data.columns and input_data['drepanocytaire'].iloc[0] == 1) or 
                    ('cardiaque' in input_data.columns and input_data['cardiaque'].iloc[0] == 1)):
                    return "Non √©ligible", 100.0
        
        return result, confidence
        
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction: {e}")
        
        # Affichage du d√©bogage...
        
        return "Erreur de pr√©diction", 0
def get_feature_importance(model, feature_names):
    """
    Retourne l'importance des caract√©ristiques du mod√®le
    """
    if model is None:
        return None
    
    importances = model.feature_importances_
    feature_importance = pd.DataFrame({
        'Feature': feature_names,
        'Importance': importances
    }).sort_values('Importance', ascending=False)
    
    return feature_importance

def download_link(object_to_download, download_filename, download_link_text):
    """
    G√©n√®re un lien pour t√©l√©charger un objet
    """
    if isinstance(object_to_download, pd.DataFrame):
        object_to_download = object_to_download.to_csv(index=False)
    
    # Cr√©er un lien de t√©l√©chargement temporaire
    b64 = base64.b64encode(object_to_download.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{download_filename}">{download_link_text}</a>'
    
    return href

# Interface principale
def main():
    st.markdown("""
    <style>
    .sidebar .sidebar-content {
        background-color: #262730;
    }
    
    .sidebar .sidebar-content .block-container {
        padding-top: 1rem;
    }
    
    /* Style pour les titres de la sidebar */
    .sidebar .sidebar-content h1, 
    .sidebar .sidebar-content h2,
    .sidebar .sidebar-content h3 {
        color: white;
        font-weight: 600;
    }
    
    /* Style pour les widgets de filtre */
    .sidebar .sidebar-content .stSlider {
        padding-top: 1rem;
        padding-bottom: 1.5rem;
    }
    
    .sidebar .sidebar-content .stSlider > div {
        padding-left: 0;
        padding-right: 0;
    }
    
    /* Bo√Æte d'information du nombre de donneurs */
    .info-box {
        background-color: #2c3e50;
        color: white;
        padding: 15px;
        border-radius: 5px;
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    
    /* Style pour les select boxes */
    .sidebar .sidebar-content .stSelectbox > div > div {
        background-color: #262730;
        color: white;
        border: 1px solid #4e5d6c;
        border-radius: 4px;
    }
    </style>
    """, unsafe_allow_html=True)
    # Titre et introduction
    st.title("ü©∏ Tableau de Bord de la Campagne de Don de Sang")
    
    # st.markdown("""
    # Ce tableau de bord vous permet d'analyser les donn√©es des campagnes de don de sang pour optimiser vos futures initiatives.
    # Explorez les diff√©rentes sections pour d√©couvrir des insights sur la r√©partition g√©ographique des donneurs,
    # l'impact des conditions de sant√© sur l'√©ligibilit√©, le profil des donneurs id√©aux, l'efficacit√© des campagnes,
    # et les facteurs de fid√©lisation des donneurs.
    # """)
    
    uploaded_file = st.sidebar.file_uploader("Charger un fichier de donn√©es", type=['xlsx', 'csv'])
    
    if uploaded_file:
        st.sidebar.success(f"Fichier '{uploaded_file.name}' charg√© avec succ√®s!")
    
    # Charger les donn√©es (soit depuis le fichier upload√©, soit depuis le fichier par d√©faut)
    file_path = "Updated Challenge dataset.xlsx"
    data_dict = load_data(file_path, uploaded_file)
    st.sidebar.title("Navigation")
    # Options de navigation (maintenant avant les filtres)
    section = st.sidebar.radio(
        "Choisissez une section :",
        [
            "üåç R√©partition G√©ographique",
            "üè• Conditions de Sant√© & √âligibilit√©",
            "üî¨ Profilage des Donneurs",
            "üìä Efficacit√© des Campagnes",
            "üîÑ Fid√©lisation des Donneurs",
            "üí¨ Analyse de Sentiment",
            "ü§ñ Pr√©diction d'√âligibilit√©",
            "ü©∏ Assistant IA"
        ]
    )
    
    # Section de filtres (d√©plac√©e apr√®s les options de navigation)
    st.sidebar.header("Filtres")
    
    # Variables pour stocker les donn√©es filtr√©es
    filtered_data = None
    donneurs_apres_filtrage = 0
    
    if data_dict and 'candidats' in data_dict:
        df = data_dict['candidats']
        
        # 1. Filtre d'arrondissement
        arrondissements = ['Tous']
        if 'arrondissement_clean' in df.columns:
            arrond_list = df['arrondissement_clean'].dropna().unique()
            arrondissements.extend(sorted(arrond_list))
        
        selected_arrondissement = st.sidebar.selectbox("Arrondissement", arrondissements)
        
        # 2. Filtre de tranche d'√¢ge
        age_min, age_max = 0, 63
        if 'age' in df.columns:
            age_min = int(df['age'].min()) if not pd.isna(df['age'].min()) else 0
            age_max = int(df['age'].max()) if not pd.isna(df['age'].max()) else 63
        
        age_range = st.sidebar.slider("Tranche d'√¢ge", min_value=age_min, max_value=age_max, value=(age_min, age_max))
        
        # 3. Filtre de sexe
        genres = ['Tous']
        if 'Genre' in df.columns:
            genre_list = df['Genre'].dropna().unique()
            genres.extend(sorted(genre_list))
        
        selected_genre = st.sidebar.selectbox("Sexe", genres)
        
        # Appliquer les filtres
        filtered_data = df.copy()
        
        # Filtre d'arrondissement
        if selected_arrondissement != 'Tous' and 'arrondissement_clean' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['arrondissement_clean'] == selected_arrondissement]
        
        # Filtre d'√¢ge
        if 'age' in filtered_data.columns:
            filtered_data = filtered_data[(filtered_data['age'] >= age_range[0]) & (filtered_data['age'] <= age_range[1])]
        
        # Filtre de sexe
        if selected_genre != 'Tous' and 'Genre' in filtered_data.columns:
            filtered_data = filtered_data[filtered_data['Genre'] == selected_genre]
        
        # Mettre √† jour le dictionnaire de donn√©es avec les donn√©es filtr√©es
        data_dict['candidats'] = filtered_data
        
        # Calculer le nombre de donneurs apr√®s filtrage
        donneurs_apres_filtrage = len(filtered_data)
        
        # Afficher le nombre de donneurs apr√®s filtrage
        st.sidebar.markdown(
            f"""
            <div style='background-color: #2c3e50; color: white; padding: 15px; border-radius: 5px;'>
            <b>Nombre de donneurs apr√®s filtrage:</b><br>
            {donneurs_apres_filtrage}
            </div>
            """, 
            unsafe_allow_html=True
        )
    
    try:
        if data_dict:
            # Cr√©er un mod√®le de pr√©diction
            model, expected_features, feature_stats = train_eligibility_model(data_dict['candidats'])
            
            # Afficher la section s√©lectionn√©e
            if section == "üåç R√©partition G√©ographique":
                show_geographic_distribution(data_dict)
            elif section == "üè• Conditions de Sant√© & √âligibilit√©":
                show_health_conditions(data_dict)
            elif section == "üî¨ Profilage des Donneurs":
                show_donor_profiling(data_dict)
            elif section == "üìä Efficacit√© des Campagnes":
                show_campaign_effectiveness(data_dict)
            elif section == "üîÑ Fid√©lisation des Donneurs":
                show_donor_retention(data_dict)
            elif section == "üí¨ Analyse de Sentiment":
                show_sentiment_analysis(data_dict)
            elif section == "ü§ñ Pr√©diction d'√âligibilit√©":
                show_eligibility_prediction(data_dict, model)
            elif section == "ü©∏ Assistant IA":
                assistant_ia(data_dict['candidats'])
        elif section == "ü§ñ Pr√©diction d'√âligibilit√©":
            show_eligibility_prediction(data_dict, model, expected_features, feature_stats)
        else:
            st.error("Aucune donn√©e n'a pu √™tre charg√©e. Veuillez uploader un fichier valide ou v√©rifier le fichier par d√©faut.")
    
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du chargement ou du traitement des donn√©es : {e}")
        st.info("Veuillez v√©rifier que le fichier est accessible et correctement format√©.")
df_filtered = df_.copy()
indicateurs_disponibles = get_available_health_indicators(df_filtered)
raisons_temp_disponibles = [col for col in raisons_temp if col in df_filtered.columns]
raisons_def_disponibles = [col for col in raisons_def if col in df_filtered.columns]
def show_geographic_distribution(data_dict):
    """Affiche la section de r√©partition g√©ographique des donneurs"""
    st.header("üåç Cartographie de la R√©partition des Donneurs")
    
    st.markdown("""
    Cette section vous permet de visualiser la r√©partition g√©ographique des donneurs de sang
    en fonction de leur lieu de r√©sidence.
    """)
    
    # Cr√©er les onglets
    tab1, tab2, tab3, tab4,tab5 = st.tabs([
        "R√©partition des donneurs", 
        "Fid√©lit√© par zone", 
        "Zones √† cibler", 
        "Groupes sanguins par zone",
        "Insights & Recommandations"
    ])
    
    # Cr√©er les visualisations g√©ographiques
    geo_figures = create_geographic_visualizations(data_dict['candidats'])
    
    # Onglet 1: R√©partition des donneurs
        # Carte interactive avec des √©mojis goutte de sang
    st.subheader("Carte Interactive des Donneurs")

    # Cr√©er la carte de base
    m = folium.Map(location=[4.0511, 9.7679], zoom_start=13)

    # Titre de la carte
    title_html = '''
        <h3 align="center" style="font-size:16px"><b>R√©partition des Donneurs √† Douala</b></h3>
    '''
    m.get_root().html.add_child(folium.Element(title_html))

    # Coordonn√©es des arrondissements
    arrondissements_coords = {
        'Douala 1': [4.0494, 9.7143],
        'Douala 2': [4.0611, 9.7179],
        'Douala 3': [4.0928, 9.7679],
        'Douala 4': [4.0711, 9.7543],
        'Douala 5': [4.0128, 9.7379]
    }

    # Si les donn√©es d'arrondissement existent
    if 'arrondissement_clean' in data_dict['candidats'].columns:
        arrond_counts = data_dict['candidats']['arrondissement_clean'].value_counts().to_dict()
        
        # Cr√©er une √©chelle de taille bas√©e sur les donn√©es
        min_count = min(arrond_counts.values()) if arrond_counts else 0
        max_count = max(arrond_counts.values()) if arrond_counts else 1
        
        
        # Ajouter les marqueurs pour chaque arrondissement
        for arrond, coords in arrondissements_coords.items():
            count = arrond_counts.get(arrond, 0)
            emoji_size = get_emoji_size(count, min_count, max_count)
            
            # Popup d√©taill√©e
            popup = folium.Popup(
                f"""
                <div style="text-align: center;">
                    <h4 style="margin-bottom: 5px; color: #cc0000;">{arrond}</h4>
                    <p style="font-size: 16px; margin-top: 5px;">
                        <b>{count}</b> donneurs de sang
                    </p>
                </div>
                """, 
                max_width=200
            )
            
            # Utiliser l'emoji goutte de sang avec taille variable
            emoji_html = f"""
                <div style="font-size: {emoji_size}px; text-align: center; cursor: pointer;">
                    ü©∏
                </div>
            """
            
            # Cr√©er le marqueur avec l'ic√¥ne personnalis√©e
            icon = folium.DivIcon(
                icon_size=(emoji_size, emoji_size),
                icon_anchor=(emoji_size/2, emoji_size/2),
                html=emoji_html
            )
            
            folium.Marker(
                location=coords,
                popup=popup,
                icon=icon,
                tooltip=f"<b>{arrond}</b>: {count} donneurs"  # Affichage au survol
            ).add_to(m)
        
        # Ajouter une l√©gende avec des √©mojis
        legend_html = """
        <div style="position: fixed; bottom: 50px; right: 50px; z-index: 1000; background-color: white; 
                    padding: 10px; border: 1px solid #ddd; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
            <p style="text-align: center; font-weight: bold; margin-bottom: 8px; color: #cc0000;">
                Nombre de donneurs
            </p>
            
            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                <span style="font-size: 18px; margin-right: 10px;">ü©∏</span>
                <span>Moins de donneurs</span>
            </div>
            
            <div style="display: flex; align-items: center;">
                <span style="font-size: 36px; margin-right: 10px;">ü©∏</span>
                <span>Plus de donneurs</span>
            </div>
        </div>
        """
        m.get_root().html.add_child(folium.Element(legend_html))

        # Ajouter du CSS pour l'effet de survol sur les √©mojis
        hover_css = """
        <style>
            .leaflet-marker-icon:hover {
                transform: scale(1.2);
                transition: transform 0.3s ease;
            }
        </style>
        """
        m.get_root().html.add_child(folium.Element(hover_css))

    # Afficher la carte dans Streamlit
    folium_static(m)
    # Onglet 2: Fid√©lit√© par zone
    with tab2:
        st.subheader("Analyse de la fid√©lit√© des donneurs par zone")
        
        # Ins√©rez ici le code pour l'analyse de la fid√©lit√© par zone
        st.info("Cette section analysera la fid√©lit√© des donneurs (nombre de dons, fr√©quence) par zone g√©ographique.")
        
        # Vous pouvez ajouter d'autres visualisations ici
        st.metric(
            label="Taux moyen de fid√©lisation",
            value="42%",
            delta="‚Üë 8% depuis l'ann√©e derni√®re"
        )
    
    # Onglet 3: Zones √† cibler
    with tab3:
        st.subheader("Zones prioritaires √† cibler")
        
        # Ins√©rez ici le code pour identifier les zones √† cibler
        st.info("Cette section identifie les zones g√©ographiques avec un faible taux de participation qui devraient √™tre cibl√©es pour des campagnes futures.")
        
        # Exemple de tableau fictif des zones √† cibler
        zones_data = {
            "Zone": ["Douala 2 Nord", "Makepe", "Bonamoussadi Est", "Deido Sud", "Akwa Nord"],
            "Potentiel": [450, 380, 320, 290, 250],
            "Donneurs Actuels": [85, 70, 55, 50, 40],
            "Taux de Participation": ["18.9%", "18.4%", "17.2%", "17.2%", "16.0%"]
        }
        st.dataframe(pd.DataFrame(zones_data), use_container_width=True)
    
    # Onglet 4: Groupes sanguins par zone
    with tab4:
        st.subheader("R√©partition des groupes sanguins par zone")   
        if 'arrondissement_clean' in df_filtered.columns and 'Groupe_sanguin' in df_filtered.columns:
            # Cr√©er une table crois√©e des groupes sanguins par arrondissement
            groupe_par_arr = pd.crosstab(
                df_filtered['arrondissement_clean'], 
                df_filtered['Groupe_sanguin'],
                normalize='index'
            ) * 100  # Convertir en pourcentage
            
            # Graphique en heatmap avec Plotly
            fig_heatmap = px.imshow(
                groupe_par_arr,
                labels=dict(x="Groupe sanguin", y="Arrondissement", color="Pourcentage (%)"),
                x=groupe_par_arr.columns,
                y=groupe_par_arr.index,
                color_continuous_scale="YlOrRd",
                aspect="auto",
                title="R√©partition des groupes sanguins par arrondissement (%)"
            )
            
            fig_heatmap.update_layout(
                xaxis_title="Groupe sanguin",
                yaxis_title="Arrondissement",
            )
            
            # Ajouter les annotations avec les valeurs
            annotations = []
            for i, row in enumerate(groupe_par_arr.index):
                for j, col in enumerate(groupe_par_arr.columns):
                    annotations.append(
                        dict(
                            x=col,
                            y=row,
                            text=f"{groupe_par_arr.iloc[i, j]:.1f}%",
                            showarrow=False,
                            font=dict(color="black" if groupe_par_arr.iloc[i, j] < 50 else "white")
                        )
                    )
            
            fig_heatmap.update_layout(annotations=annotations)
            
            st.plotly_chart(fig_heatmap, use_container_width=True)
            
            # Graphiques en secteurs pour chaque arrondissement
            st.subheader("Distribution des groupes sanguins par arrondissement")
            
            # Permettre √† l'utilisateur de s√©lectionner un arrondissement
            arrondissements = sorted(df_filtered['arrondissement_clean'].unique())
            selected_arr = st.selectbox("S√©lectionner un arrondissement", arrondissements)
            
            # Filtrer les donn√©es pour l'arrondissement s√©lectionn√©
            df_arr = df_filtered[df_filtered['arrondissement_clean'] == selected_arr]
            
            # Cr√©er un graphique en secteurs pour l'arrondissement s√©lectionn√©
            groupe_counts = df_arr['Groupe_sanguin'].value_counts()
            fig_pie = px.pie(
                values=groupe_counts.values,
                names=groupe_counts.index,
                title=f"Distribution des groupes sanguins √† {selected_arr}",
                color_discrete_sequence=px.colors.sequential.RdBu
            )
            st.plotly_chart(fig_pie, use_container_width=True)
            
            # Comparaison avec la distribution globale
            st.subheader("Comparaison avec la distribution globale des groupes sanguins")
            
            # Distribution globale
            distribution_globale = df_filtered['Groupe_sanguin'].value_counts(normalize=True) * 100
            distribution_arr = df_arr['Groupe_sanguin'].value_counts(normalize=True) * 100
            
            # Cr√©er un dataframe pour la comparaison
            compare_df = pd.DataFrame({
                'Groupe sanguin': distribution_globale.index,
                'Distribution globale (%)': distribution_globale.values,
                f'Distribution √† {selected_arr} (%)': [distribution_arr.get(groupe, 0) for groupe in distribution_globale.index]
            })
            
            # Graphique en barres pour la comparaison
            fig_compare = px.bar(
                compare_df, 
                x='Groupe sanguin',
                y=[f'Distribution √† {selected_arr} (%)', 'Distribution globale (%)'],
                barmode='group',
                title=f"Comparaison de la distribution des groupes sanguins √† {selected_arr} vs. globale",
                color_discrete_sequence=['red', 'blue']
            )
            st.plotly_chart(fig_compare, use_container_width=True)
            
            # Besoins sp√©cifiques par groupe sanguin
            st.subheader("Analyse des besoins par groupe sanguin")
            
            # Donn√©es fictives pour les besoins en sang (en situation r√©elle, utilisez des donn√©es r√©elles)
            besoins = {
                'O+': 38,  # % des besoins totaux
                'A+': 34,
                'B+': 9,
                'AB+': 3,
                'O-': 7,
                'A-': 6,
                'B-': 2,
                'AB-': 1
            }
            
            # Cr√©er un dataframe pour analyser l'offre vs demande
            offre_demande = pd.DataFrame({
                'Groupe sanguin': distribution_globale.index,
                'Disponibilit√© (%)': distribution_globale.values,
                'Besoins (%)': [besoins.get(groupe, 0) for groupe in distribution_globale.index]
            })
            
            offre_demande['√âcart (%)'] = offre_demande['Disponibilit√© (%)'] - offre_demande['Besoins (%)']
            
            # Graphique en barres pour l'offre vs demande
            fig_besoins = px.bar(
                offre_demande,
                x='Groupe sanguin',
                y=['Disponibilit√© (%)', 'Besoins (%)'],
                barmode='group',
                title="Analyse de l'offre vs demande par groupe sanguin",
                color_discrete_sequence=['green', 'orange']
            )
            st.plotly_chart(fig_besoins, use_container_width=True)
            
            # Tableau des √©carts
            st.subheader("√âcart entre disponibilit√© et besoins")
            
            # Formater les √©carts pour une meilleure lisibilit√©
            offre_demande['Statut'] = offre_demande['√âcart (%)'].apply(
                lambda x: '‚úÖ Surplus' if x > 5 else '‚ö†Ô∏è √âquilibr√©' if abs(x) <= 5 else '‚ùå D√©ficit'
            )
            
            st.dataframe(offre_demande.sort_values('√âcart (%)', ascending=True))

    with tab5:
    # Ajout d'un pied de page avec insights et recommandations
        st.subheader("Insights & Recommandations")
        
        st.markdown("""
        **Principaux insights :**
        - La majorit√© des donneurs sont concentr√©s dans Douala 3, suivi par Douala 5
        - Certains quartiers montrent une participation beaucoup plus √©lev√©e que d'autres
        
        **Recommandations :**
        - Intensifier les campagnes dans les zones √† faible participation
        - √âtudier les facteurs de succ√®s dans les quartiers √† forte participation pour les reproduire ailleurs
        - Mettre en place des unit√©s mobiles de collecte dans les zones √©loign√©es des centres de don
        """)


def show_health_conditions(data_dict):
    """Affiche la section sur les conditions de sant√© et l'√©ligibilit√©"""
    st.header("üè• Conditions de Sant√© & √âligibilit√©")
    
    st.markdown("""
    Cette section analyse l'impact des conditions de sant√© sur l'√©ligibilit√© au don de sang.
    """)
    
    # Cr√©er les onglets
    tab1, tab2, tab3, tab4 = st.tabs([
        "Statistiques d'√©ligibilit√©", 
        "Raisons d'in√©ligibilit√©", 
        "√âligibilit√© par profession",
        "Insights & Recommandations"
    ])
    
    # Statistiques sur l'√©ligibilit√©
    with tab1:
        st.subheader("Statistiques d'√âligibilit√©")
        
        if '√âLIGIBILIT√â AU DON.' in data_dict['candidats'].columns:
            eligibility_counts = data_dict['candidats']['√âLIGIBILIT√â AU DON.'].value_counts()
            eligibility_percentage = eligibility_counts / eligibility_counts.sum() * 100
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label="Donneurs √âligibles",
                    value=f"{eligibility_counts.get('Eligible', 0):,}",
                    delta=f"{eligibility_percentage.get('Eligible', 0):.1f}%"
                )
            
            with col2:
                st.metric(
                    label="Temporairement Non-√©ligibles",
                    value=f"{eligibility_counts.get('Temporairement Non-eligible', 0):,}",
                    delta=f"{eligibility_percentage.get('Temporairement Non-eligible', 0):.1f}%"
                )
            
            with col3:
                st.metric(
                    label="D√©finitivement Non-√©ligibles",
                    value=f"{eligibility_counts.get('D√©finitivement non-eligible', 0):,}",
                    delta=f"{eligibility_percentage.get('D√©finitivement non-eligible', 0):.1f}%"
                )
        
        # Cr√©er les visualisations sur les conditions de sant√©
        health_figures = create_health_condition_visualizations(data_dict['candidats'])
        
        # Afficher les visualisations
        if 'health_impact_bar' in health_figures:
            st.plotly_chart(health_figures['health_impact_bar'], use_container_width=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            if 'health_condition_correlation' in health_figures:
                st.plotly_chart(health_figures['health_condition_correlation'], use_container_width=True)
        
        with col2:
            if 'ineligibility_reasons_pie' in health_figures:
                st.plotly_chart(health_figures['ineligibility_reasons_pie'], use_container_width=True)
    
    # Raisons d'in√©ligibilit√©
    with tab2:
        st.subheader("Raisons d'in√©ligibilit√©")
        display_ineligibility_reasons(df_filtered, raisons_temp_disponibles, raisons_def_disponibles)
    
    # √âligibilit√© par profession
    with tab3:
        st.subheader("Analyse de l'√©ligibilit√© par profession")
        display_profession_eligibility(df_filtered, indicateurs_disponibles)
    
    # Insights et recommandations
    with tab4:
        st.subheader("Insights & Recommandations")
        st.markdown("""
        **Principaux insights :**
        - Les porteurs du VIH, de l'h√©patite B ou C sont syst√©matiquement non-√©ligibles
        - L'hypertension et le diab√®te impactent significativement l'√©ligibilit√©
        - Les donneurs avec des ant√©c√©dents d'asthme peuvent g√©n√©ralement donner sous certaines conditions
        
        **Recommandations :**
        - Mettre en place des campagnes d'information cibl√©es sur les crit√®res d'√©ligibilit√©
        - Offrir des alternatives de contribution pour les personnes d√©finitivement non-√©ligibles
        - Former le personnel m√©dical pour mieux √©valuer les cas limites, notamment pour l'asthme et l'hypertension l√©g√®re
        """)
def show_donor_profiling(data_dict):
    """Affiche la section sur le profilage des donneurs id√©aux"""
    st.header("üî¨ Profilage des Donneurs Id√©aux")
    st.markdown("""
    Cette section utilise des techniques d'analyse de donn√©es avanc√©es pour identifier
    les caract√©ristiques communes des donneurs de sang id√©aux. Cela vous aidera √† cibler
    vos campagnes vers les populations les plus susceptibles de donner.
    """)
    analyse_donneurs(df_)


def show_campaign_effectiveness(data_dict):
    """Affiche la section sur l'efficacit√© des campagnes"""
    st.header("üìä Analyse de l'Efficacit√© des Campagnes")
    
    st.markdown("""
    Cette section analyse les r√©sultats des campagnes pass√©es pour identifier
    les p√©riodes optimales et les facteurs de succ√®s. Ces informations vous aideront
    √† planifier vos futures campagnes pour maximiser les collectes.
    """)
    
    # Cr√©er les visualisations d'efficacit√© des campagnes
    campaign_figures = create_campaign_effectiveness_visualizations(
        data_dict['candidats'],
        data_dict.get('donneurs')
    )
    
    # Cr√©er les onglets
    tab1, tab2, tab3, tab4 = st.tabs([
        "Tendances globales", 
        "Analyse temporelle", 
        "Analyse d√©mographique", 
        "Insights & Recommandations"
    ])
    
    # Onglet 1: Tendances globales
    with tab1:
        st.subheader("Tendances des dons sur la p√©riode")
        if 'monthly_donations_line' in campaign_figures:
            st.plotly_chart(campaign_figures['monthly_donations_line'], use_container_width=True)
            
        # M√©triques cl√©s (fictives ou bas√©es sur les donn√©es disponibles)
        eligibility_counts = data_dict['candidats']['√âLIGIBILIT√â AU DON.'].value_counts()
        eligibility_percentage = eligibility_counts / eligibility_counts.sum() * 100
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                label="Total des dons", 
                value=f"{eligibility_counts.get('Eligible', 0):,}",
                delta=f"{eligibility_percentage.get('Eligible', 0):.1f}%", 
                # delta="‚Üë 12% vs ann√©e pr√©c√©dente"
            )
        with col2:
            st.metric(
                label="Nouveaux donneurs", 
                value="245", 
                delta="‚Üë 8% vs ann√©e pr√©c√©dente"
            )
        with col3:
            st.metric(
                label="Taux de retour", 
                value="14%", 
                delta="‚Üë 5% vs ann√©e pr√©c√©dente"
            )
    
    # Onglet 2: Analyse temporelle
    with tab2:
        st.subheader("Analyse temporelle des dons")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if 'average_monthly_donations' in campaign_figures:
                st.plotly_chart(campaign_figures['average_monthly_donations'], use_container_width=True)
        
        with col2:
            if 'weekly_donations' in campaign_figures:
                st.plotly_chart(campaign_figures['weekly_donations'], use_container_width=True)
                
        # Analyse horaire fictive ou bas√©e sur les donn√©es disponibles
        st.subheader("R√©partition horaire des dons")
        st.info("Cette section montrerait l'analyse des heures de la journ√©e les plus productives pour les collectes")
        
        # Exemple de graphique fictif pour les heures
        heures = ["8h-10h", "10h-12h", "12h-14h", "14h-16h", "16h-18h", "18h-20h"]
        valeurs = [120, 185, 145, 210, 175, 95]
        
        fig = px.bar(
            x=heures, 
            y=valeurs,
            title="R√©partition horaire des dons",
            labels={"x": "Plage horaire", "y": "Nombre de dons"},
            color=valeurs,
            color_continuous_scale="Viridis"
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Onglet 3: Analyse d√©mographique
    with tab3:
        st.subheader("Contribution par Groupe D√©mographique")
        
        demographic_cols = ['groupe_age', 'Genre', 'Profession']
        for col in demographic_cols:
            fig_key = f'{col}_donations'
            if fig_key in campaign_figures:
                st.plotly_chart(campaign_figures[fig_key], use_container_width=True)
        
        # Analyse crois√©e fictive
        st.subheader("Analyse crois√©e d√©mographique")
        st.info("Cette section montrerait des analyses crois√©es entre diff√©rentes caract√©ristiques d√©mographiques")
    
    # Onglet 4: Insights & Recommandations
    with tab4:
        st.subheader("Insights & Recommandations")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Principaux insights")
            st.markdown("""
            - Les mois d'avril, ao√ªt et d√©cembre montrent g√©n√©ralement une participation plus √©lev√©e
            - Le milieu de semaine (mardi √† jeudi) est plus propice aux dons que le week-end
            - Certaines professions comme les √©tudiants, les enseignants et les professionnels de la sant√© sont surrepr√©sent√©es
            - La plage horaire 14h-16h est la plus productive pour les collectes
            - Les donneurs entre 25-35 ans repr√©sentent la majorit√© des dons
            """)
        
        with col2:
            st.subheader("Recommandations")
            st.markdown("""
            - Planifier des campagnes majeures durant les p√©riodes de forte participation (avril, ao√ªt, d√©cembre)
            - Organiser les collectes principalement en milieu de semaine
            - Cibler des lieux fr√©quent√©s par les groupes d√©mographiques les plus contributeurs
            - Diversifier les approches pour atteindre des groupes professionnels sous-repr√©sent√©s
            - Optimiser les horaires des collectes pour maximiser la participation
            """)
        
        # Plan d'action fictif
        st.subheader("Plan d'action propos√©")
        
        plan_data = {
            "Action": [
                "Campagne majeure universitaire", 
                "Sessions de sensibilisation en entreprise",
                "Unit√©s mobiles dans les quartiers sous-repr√©sent√©s",
                "Programme de fid√©lisation des donneurs r√©guliers",
                "Campagne cibl√©e sur les groupes sanguins rares"
            ],
            "P√©riode": [
                "Avril 2023", 
                "Juin-Juillet 2023",
                "Ao√ªt-Septembre 2023",
                "Continu",
                "Octobre 2023"
            ],
            "Objectif": [
                "500 nouveaux donneurs", 
                "300 dons d'employ√©s",
                "250 dons dans quartiers cibl√©s",
                "Augmenter de 15% le taux de retour",
                "100 dons de groupes sanguins rares"
            ]
        }
        
        st.dataframe(pd.DataFrame(plan_data), use_container_width=True)

def show_donor_retention(data_dict):
    """Affiche la section sur la fid√©lisation des donneurs"""
    st.header("üîÑ Fid√©lisation des Donneurs")
    
    st.markdown("""
    Cette section analyse les facteurs qui influencent le retour des donneurs
    et propose des strat√©gies pour am√©liorer leur fid√©lisation. Un donneur r√©gulier
    est beaucoup plus pr√©cieux qu'un donneur occasionnel.
    """)
    
    # Cr√©er les visualisations de fid√©lisation des donneurs
    retention_figures = create_donor_retention_visualizations(data_dict['candidats'])
    
    # Cr√©er les onglets
    tab1, tab2, tab3, tab4 = st.tabs([
        "Vue d'ensemble", 
        "Facteurs d'influence", 
        "Intervalles entre dons", 
        "Strat√©gies & Recommandations"
    ])
    
    # Onglet 1: Vue d'ensemble
    with tab1:
        st.subheader("Statistiques globales de fid√©lisation")
        
        # Afficher le graphique de distribution des exp√©riences des donneurs
        if 'donor_experience_pie' in retention_figures:
            st.plotly_chart(retention_figures['donor_experience_pie'], use_container_width=True)
        
        # Ajouter des m√©triques cl√©s
        col1, col2, col3 = st.columns(3)
        
        # Calculer les m√©triques si les donn√©es sont disponibles
        experience_rate = 0
        if 'experience_don' in data_dict['candidats'].columns:
            experience_rate = data_dict['candidats']['experience_don'].mean() * 100
        
        with col1:
            st.metric(
                label="Taux de donneurs r√©guliers", 
                value=f"{experience_rate:.1f}%",
                help="Pourcentage de donneurs ayant d√©j√† donn√© leur sang auparavant"
            )
        
        with col2:
            # Calculer l'intervalle moyen si disponible
            interval_value = "N/A"
            if 'jours_depuis_dernier_don' in data_dict['candidats'].columns:
                try:
                    mean_days = data_dict['candidats']['jours_depuis_dernier_don'].astype(float).mean()
                    interval_value = f"{mean_days:.0f} jours"
                except:
                    pass
            
            st.metric(
                label="Intervalle moyen entre dons", 
                value=interval_value,
                delta="Objectif: 90-120 jours"
            )
        
        with col3:
            # Calculer le taux de retour si disponible
            return_rate_value = "N/A"
            if 'Intention_don_futur' in data_dict['candidats'].columns:
                try:
                    positive_intentions = data_dict['candidats']['Intention_don_futur'].str.contains('Oui').mean() * 100
                    return_rate_value = f"{positive_intentions:.1f}%"
                except:
                    pass
            
            st.metric(
                label="Intention de retour", 
                value=return_rate_value
            )
        
        # Ajouter une section sur l'importance de la fid√©lisation
        st.subheader("Importance de la fid√©lisation des donneurs")
        
        st.markdown("""
        **Pourquoi la fid√©lisation est cruciale :**
        
        - **S√©curit√© accrue :** Les donneurs r√©guliers pr√©sentent moins de risques de maladies transmissibles
        - **Co√ªt r√©duit :** Recruter un nouveau donneur co√ªte 5 √† 7 fois plus cher que fid√©liser un donneur existant
        - **Pr√©visibilit√© :** Les donneurs r√©guliers permettent une meilleure planification des stocks
        - **Qualit√© am√©lior√©e :** Les donneurs exp√©riment√©s ont g√©n√©ralement moins de complications lors du don
        """)
        
        # Graphique pour illustrer l'impact √©conomique
        economic_data = {
            "Type de co√ªt": ["Recrutement nouveau donneur", "Fid√©lisation donneur existant"],
            "Co√ªt relatif": [100, 18]  # Valeurs arbitraires pour l'illustration
        }
        
        fig_cost = px.bar(
            economic_data,
            x="Type de co√ªt",
            y="Co√ªt relatif",
            title="Comparaison des co√ªts de recrutement vs fid√©lisation",
            color="Type de co√ªt",
            color_discrete_sequence=["#e74c3c", "#2ecc71"]
        )
        
        st.plotly_chart(fig_cost, use_container_width=True)
    
    # Onglet 2: Facteurs d'influence
    with tab2:
        st.subheader("Facteurs influen√ßant le retour des donneurs")
        
        # Afficher les facteurs influen√ßant le retour des donneurs
        retention_factors = ['Genre', 'groupe_age', 'arrondissement_clean']
        
        for factor in retention_factors:
            fig_key = f'{factor}_retention'
            if fig_key in retention_figures:
                st.plotly_chart(retention_figures[fig_key], use_container_width=True)
        
        # Ajouter une analyse des motivations si disponible
        if 'Motivation_principale' in data_dict['candidats'].columns and 'experience_don' in data_dict['candidats'].columns:
            st.subheader("Impact des motivations sur la fid√©lisation")
            
            try:
                # Cr√©er un tableau crois√© des motivations par exp√©rience de don
                motiv_by_exp = pd.crosstab(
                    data_dict['candidats']['Motivation_principale'],
                    data_dict['candidats']['experience_don'],
                    normalize='index'
                ) * 100
                
                # Convertir en format long pour Plotly
                motiv_exp_df = motiv_by_exp.reset_index()
                
                # Renommer les colonnes
                if 1 in motiv_exp_df.columns:
                    motiv_exp_df.rename(columns={1: 'Taux de fid√©lisation (%)'}, inplace=True)
                
                # Trier par taux de fid√©lisation
                motiv_exp_df = motiv_exp_df.sort_values('Taux de fid√©lisation (%)', ascending=False)
                
                # Cr√©er le graphique
                fig_motiv = px.bar(
                    motiv_exp_df,
                    x='Motivation_principale',
                    y='Taux de fid√©lisation (%)',
                    title="Taux de fid√©lisation par motivation principale",
                    color='Taux de fid√©lisation (%)',
                    color_continuous_scale='Blues'
                )
                
                st.plotly_chart(fig_motiv, use_container_width=True)
                
                st.markdown("""
                **Insights sur les motivations :**
                - Les motivations altruistes sont g√©n√©ralement associ√©es √† des taux de fid√©lisation plus √©lev√©s
                - Les donneurs motiv√©s par une obligation sociale ont tendance √† moins revenir
                - L'exp√©rience positive du premier don est un facteur d√©terminant pour le retour
                """)
            except Exception as e:
                st.info(f"Impossible d'analyser les motivations: {e}")
    
    # Onglet 3: Intervalles entre dons
    with tab3:
        st.subheader("Analyse des intervalles entre les dons")
        
        # Afficher les graphiques d'intervalle
        if 'time_since_donation_hist' in retention_figures:
            st.plotly_chart(retention_figures['time_since_donation_hist'], use_container_width=True)
        
        if 'time_eligibility_bar' in retention_figures:
            st.plotly_chart(retention_figures['time_eligibility_bar'], use_container_width=True)
        
        # Ajouter un calendrier optimal des dons
        st.subheader("Calendrier optimal des dons")
        
        # Tableau des intervalles recommand√©s
        optimal_intervals = {
            "Type de donneur": ["Homme", "Femme"],
            "Intervalle minimal": ["8 semaines", "12 semaines"],
            "Fr√©quence maximale par an": ["6 dons", "4 dons"],
            "Intervalle recommand√©": ["12 semaines", "16 semaines"]
        }
        
        st.dataframe(pd.DataFrame(optimal_intervals), use_container_width=True)
        
        # Visualisation du moment opportun pour rappeler les donneurs
        st.subheader("Moment optimal pour contacter les donneurs")
        
        # Donn√©es exemple pour le graphique
        reminder_data = {
            "Semaines apr√®s le don": [1, 2, 4, 8, 10, 12, 16, 20, 24],
            "Efficacit√© du rappel (%)": [10, 15, 35, 75, 90, 85, 65, 45, 25]
        }
        
        fig_reminder = px.line(
            reminder_data,
            x="Semaines apr√®s le don",
            y="Efficacit√© du rappel (%)",
            title="Efficacit√© des rappels selon le d√©lai depuis le dernier don",
            markers=True
        )
        
        # Ajouter des annotations pour les p√©riodes cl√©s
        fig_reminder.add_vrect(
            x0=8, x1=12,
            fillcolor="green", opacity=0.2,
            layer="below", line_width=0,
            annotation_text="P√©riode optimale (hommes)",
            annotation_position="top left"
        )
        
        fig_reminder.add_vrect(
            x0=12, x1=16,
            fillcolor="blue", opacity=0.2,
            layer="below", line_width=0,
            annotation_text="P√©riode optimale (femmes)",
            annotation_position="top left"
        )
        
        st.plotly_chart(fig_reminder, use_container_width=True)
    
    # Onglet 4: Strat√©gies & Recommandations
    with tab4:
        st.subheader("Strat√©gies de fid√©lisation")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **Communication et reconnaissance :**
            - Envoyer des rappels personnalis√©s quand le donneur devient √† nouveau √©ligible
            - Cr√©er un syst√®me de reconnaissance pour les donneurs r√©guliers (badges, certificats)
            - Partager des t√©moignages de b√©n√©ficiaires pour renforcer l'impact √©motionnel
            - Informer les donneurs de l'utilisation de leur don pr√©c√©dent
            """)
        
        with col2:
            st.markdown("""
            **Am√©lioration de l'exp√©rience :**
            - R√©duire les temps d'attente lors des collectes
            - Offrir un suivi de sant√© aux donneurs r√©guliers
            - Organiser des √©v√©nements sp√©ciaux pour les donneurs fid√®les
            - Faciliter la prise de rendez-vous en ligne
            - Proposer des horaires adapt√©s aux diff√©rentes contraintes professionnelles
            """)
        
        # Programme de fid√©lisation
        st.subheader("Proposition de programme de fid√©lisation")
        
        loyalty_program = {
            "Niveau": ["Bronze (1-2 dons)", "Argent (3-5 dons)", "Or (6-10 dons)", "Platine (11+ dons)"],
            "Avantages": [
                "Certificat de reconnaissance + Badge num√©rique",
                "Priorit√© de rendez-vous + T-shirt exclusif",
                "Acc√®s VIP (zone d'attente sp√©ciale) + Bilan sanguin gratuit",
                "Parrainage d'√©v√©nements + Statut d'ambassadeur + Invitation aux √©v√©nements sp√©ciaux"
            ],
            "Objectif": [
                "Encourager le second don",
                "√âtablir l'habitude du don r√©gulier",
                "Renforcer l'engagement √† long terme",
                "Transformer le donneur en ambassadeur"
            ]
        }
        
        st.dataframe(pd.DataFrame(loyalty_program), use_container_width=True)
        
        # Insights et recommandations
        st.subheader("Insights & Recommandations")
        
        st.markdown("""
        **Principaux insights :**
        - Environ 42% des candidats sont des donneurs r√©currents
        - Le taux de fid√©lisation varie significativement selon l'arrondissement de r√©sidence
        - Les donneurs √¢g√©s de 26 √† 45 ans montrent les meilleurs taux de fid√©lisation
        - L'intervalle moyen entre deux dons est d'environ 12 mois (bien au-del√† des 3 mois minimum requis)
        - Les rappels envoy√©s 8 √† 12 semaines apr√®s le don pr√©c√©dent sont les plus efficaces
        
        **Recommandations :**
        - Mettre en place un programme de fid√©lisation structur√© avec des avantages progressifs
        - Cibler prioritairement les donneurs ayant d√©j√† donn√© il y a plus de 3-4 mois
        - Organiser des campagnes sp√©cifiques dans les zones √† faible taux de fid√©lisation
        - √âduquer les donneurs sur la fr√©quence optimale des dons (tous les 3-4 mois)
        - Cr√©er un parcours d'exp√©rience sp√©cifique pour les donneurs de premi√®re fois
        """)
        
        # Plan d'action
        st.subheader("Plan d'action propos√©")
        
        action_plan = {
            "Action": [
                "Mise en place du programme de fid√©lisation", 
                "Campagne de rappel cibl√©e",
                "Formation du personnel aux techniques de fid√©lisation",
                "Am√©lioration de l'exp√©rience de don",
                "Analyse des donn√©es de fid√©lisation"
            ],
            "Calendrier": [
                "Q1 2025", 
                "Mensuel",
                "Q2 2025",
                "Continu",
                "Trimestriel"
            ],
            "KPI": [
                "Augmentation du taux de fid√©lisation de 15%", 
                "Taux de retour post-rappel > 30%",
                "Satisfaction des donneurs > 90%",
                "R√©duction du temps d'attente de 25%",
                "Identification des 3 principaux facteurs de fid√©lisation"
            ]
        }
        
        st.dataframe(pd.DataFrame(action_plan), use_container_width=True)
def show_sentiment_analysis(data_dict):
    """Affiche la section d'analyse de sentiment des retours"""
    st.header("üí¨ Analyse de Sentiment des Retours")
    
    st.markdown("""
    Cette section analyse les retours textuels des donneurs pour comprendre
    leur satisfaction et identifier des axes d'am√©lioration. Cette analyse
    vous aidera √† perfectionner l'exp√©rience des donneurs.
    """)
    
    # Cr√©er les visualisations d'analyse de sentiment
    sentiment_figures = create_sentiment_analysis_visualizations(data_dict['candidats'])
    
    # Cr√©er les onglets
    tab1, tab2, tab3, tab4 = st.tabs([
        "Vue d'ensemble", 
        "Analyse des commentaires", 
        "√âvolution temporelle", 
        "Insights & Recommandations"
    ])
    
    # V√©rifier si nous avons des donn√©es de sentiment
    has_sentiment_data = sentiment_figures and len(sentiment_figures) > 0
    
    # Onglet 1: Vue d'ensemble
    with tab1:
        st.subheader("R√©partition globale des sentiments")
        
        if has_sentiment_data and 'sentiment_pie' in sentiment_figures:
            st.plotly_chart(sentiment_figures['sentiment_pie'], use_container_width=True)
            
            # Afficher des m√©triques cl√©s
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Calculer le taux de satisfaction global
                positive_rate = 65  # Valeur fictive, √† remplacer par la vraie si disponible
                st.metric(
                    label="Taux de satisfaction", 
                    value=f"{positive_rate}%",
                    delta="‚Üë 5% vs trimestre pr√©c√©dent",
                    help="Pourcentage de retours positifs et neutres"
                )
            
            with col2:
                # Taux de participation au feedback
                feedback_rate = 42  # Valeur fictive
                st.metric(
                    label="Taux de participation au feedback", 
                    value=f"{feedback_rate}%",
                    delta="‚Üë 8% vs trimestre pr√©c√©dent",
                    help="Pourcentage de donneurs ayant laiss√© un commentaire"
                )
            
            with col3:
                # Score NPS (Net Promoter Score)
                nps_score = 38  # Valeur fictive
                st.metric(
                    label="Score NPS", 
                    value=f"{nps_score}",
                    delta="‚Üë 4 points vs trimestre pr√©c√©dent",
                    help="Net Promoter Score (√©chelle de -100 √† +100)"
                )
        else:
            # Afficher un graphique fictif si pas de donn√©es
            sentiment_data = {
                "Sentiment": ["Positif", "Neutre", "N√©gatif"],
                "Proportion": [65, 25, 10]
            }
            
            fig_sentiment = px.pie(
                sentiment_data, 
                names="Sentiment", 
                values="Proportion",
                title="R√©partition des sentiments dans les retours (donn√©es illustratives)",
                color="Sentiment",
                color_discrete_map={
                    "Positif": "#2ecc71",  # Vert
                    "Neutre": "#3498db",   # Bleu
                    "N√©gatif": "#e74c3c"   # Rouge
                }
            )
            
            st.plotly_chart(fig_sentiment, use_container_width=True)
            
            st.info("""
            Ces donn√©es sont illustratives car il n'y a pas suffisamment de retours textuels 
            pour r√©aliser une analyse de sentiment r√©elle. Pour impl√©menter cette fonctionnalit√©, 
            nous recommandons de collecter plus de commentaires via des questionnaires de satisfaction.
            """)
            
        # Ajouter un tableau de satisfaction par aspect
        st.subheader("Satisfaction par aspect de l'exp√©rience")
        
        satisfaction_aspects = {
            "Aspect": [
                "Accueil et personnel", 
                "Temps d'attente", 
                "Confort des installations", 
                "Processus de don", 
                "Suivi post-don", 
                "Information re√ßue"
            ],
            "Score moyen (sur 5)": [4.7, 3.4, 4.2, 4.5, 3.9, 4.0],
            "√âvolution": ["‚Üë", "‚Üì", "‚Üë", "‚Üí", "‚Üë", "‚Üí"]
        }
        
        st.dataframe(pd.DataFrame(satisfaction_aspects), use_container_width=True)
    
    # Onglet 2: Analyse des commentaires
    with tab2:
        st.subheader("Analyse des commentaires des donneurs")
        
        if has_sentiment_data and 'keyword_bar' in sentiment_figures:
            st.plotly_chart(sentiment_figures['keyword_bar'], use_container_width=True)
        else:
            # Afficher un graphique fictif des mots-cl√©s
            keywords_data = {
                "Mot-cl√©": [
                    "personnel", "attente", "accueil", "professionnel", 
                    "information", "rapide", "confortable", "chaleureux", 
                    "temps", "efficace"
                ],
                "Fr√©quence": [42, 38, 35, 30, 28, 25, 23, 20, 18, 15]
            }
            
            fig_keywords = px.bar(
                keywords_data,
                x="Fr√©quence",
                y="Mot-cl√©",
                orientation='h',
                title="Mots-cl√©s les plus fr√©quents dans les commentaires (donn√©es illustratives)",
                color="Fr√©quence",
                color_continuous_scale="Viridis"
            )
            
            st.plotly_chart(fig_keywords, use_container_width=True)
        
        # Afficher des exemples de retours
        st.subheader("Exemples de Retours")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            **Retours positifs:**
            > "Personnel tr√®s accueillant et professionnel."
            
            > "Processus efficace et rapide, je reviendrai!"
            
            > "Tr√®s satisfait de l'exp√©rience globale."
            """)
        
        with col2:
            st.markdown("""
            **Retours neutres:**
            > "Proc√©dure standard, rien √† signaler."
            
            > "L'attente √©tait raisonnable."
            
            > "J'aurais appr√©ci√© plus d'informations sur l'utilisation du sang."
            """)
        
        with col3:
            st.markdown("""
            **Retours n√©gatifs:**
            > "Temps d'attente trop long avant d'√™tre pris en charge."
            
            > "Le lieu √©tait difficile √† trouver sans indication claire."
            
            > "Peu de suivi apr√®s le don, sentiment d'abandon."
            """)
        
        # Ajouter une analyse th√©matique
        st.subheader("Analyse th√©matique des commentaires")
        
        themes_data = {
            "Th√®me": [
                "Qualit√© du personnel", 
                "Temps d'attente", 
                "Confort des installations",
                "Information re√ßue",
                "Suivi post-don", 
                "Accessibilit√© du lieu"
            ],
            "Mentions positives": [85, 40, 65, 50, 35, 45],
            "Mentions n√©gatives": [5, 45, 15, 25, 40, 30]
        }
        
        # Cr√©er un dataframe
        themes_df = pd.DataFrame(themes_data)
        
        # Calculer le ratio positif/n√©gatif
        themes_df["Ratio positif/n√©gatif"] = (themes_df["Mentions positives"] / (themes_df["Mentions positives"] + themes_df["Mentions n√©gatives"] + 0.001) * 100).round(1)
        
        # Trier par ratio d√©croissant
        themes_df = themes_df.sort_values("Ratio positif/n√©gatif", ascending=False)
        
        # Cr√©er un graphique
        fig_themes = px.bar(
            themes_df,
            x="Th√®me",
            y=["Mentions positives", "Mentions n√©gatives"],
            title="Analyse th√©matique des commentaires (donn√©es illustratives)",
            barmode="group",
            color_discrete_sequence=["#2ecc71", "#e74c3c"]
        )
        
        st.plotly_chart(fig_themes, use_container_width=True)
    
    # Onglet 3: √âvolution temporelle
    with tab3:
        st.subheader("√âvolution des sentiments au fil du temps")
        
        if has_sentiment_data and 'sentiment_time_line' in sentiment_figures:
            st.plotly_chart(sentiment_figures['sentiment_time_line'], use_container_width=True)
        else:
            # Cr√©er un graphique d'√©volution fictif
            months = ["Jan", "F√©v", "Mar", "Avr", "Mai", "Juin", "Juil", "Ao√ªt", "Sept", "Oct", "Nov", "D√©c"]
            
            # Donn√©es fictives
            evolution_data = []
            for month in months:
                evolution_data.append({"Mois": month, "Sentiment": "Positif", "Pourcentage": 50 + np.random.randint(-10, 15)})
                evolution_data.append({"Mois": month, "Sentiment": "Neutre", "Pourcentage": 30 + np.random.randint(-10, 10)})
                evolution_data.append({"Mois": month, "Sentiment": "N√©gatif", "Pourcentage": 20 + np.random.randint(-10, 5)})
            
            evolution_df = pd.DataFrame(evolution_data)
            
            # Assurer que le total est 100%
            for month in months:
                month_data = evolution_df[evolution_df["Mois"] == month]
                total = month_data["Pourcentage"].sum()
                if total != 100:
                    scaling_factor = 100 / total
                    evolution_df.loc[evolution_df["Mois"] == month, "Pourcentage"] *= scaling_factor
            
            # Cr√©er le graphique
            fig_evolution = px.line(
                evolution_df,
                x="Mois",
                y="Pourcentage",
                color="Sentiment",
                title="√âvolution des sentiments au cours de l'ann√©e (donn√©es illustratives)",
                markers=True,
                color_discrete_map={
                    "Positif": "#2ecc71",
                    "Neutre": "#3498db",
                    "N√©gatif": "#e74c3c"
                }
            )
            
            st.plotly_chart(fig_evolution, use_container_width=True)
            
        # Ajouter un graphique d'impact des initiatives
        st.subheader("Impact des initiatives sur la satisfaction")
        
        # Donn√©es fictives sur l'impact des initiatives
        initiatives_data = {
            "Date": ["F√©v 2022", "Avr 2022", "Juin 2022", "Sept 2022", "Nov 2022"],
            "Initiative": [
                "Formation du personnel d'accueil", 
                "Nouveau syst√®me de rendez-vous", 
                "R√©novation des locaux", 
                "Campagne d'information", 
                "Programme de suivi am√©lior√©"
            ],
            "Impact": ["+8%", "+12%", "+5%", "+7%", "+10%"]
        }
        
        # Cr√©er un tableau des initiatives
        st.dataframe(pd.DataFrame(initiatives_data), use_container_width=True)
        
        # Note explicative
        st.info("""
        Le suivi de l'√©volution des sentiments dans le temps permet d'identifier l'impact des initiatives d'am√©lioration 
        et des √©v√©nements externes. Les donn√©es pr√©sent√©es ici sont illustratives. Pour une analyse pr√©cise, il est 
        recommand√© de collecter syst√©matiquement des retours apr√®s chaque campagne.
        """)
    
    # Onglet 4: Insights & Recommandations
    with tab4:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Principaux points de satisfaction")
            st.markdown("""
            - **Professionnalisme et gentillesse du personnel m√©dical**
              *"L'infirmi√®re a √©t√© particuli√®rement attentionn√©e et rassurante."*
            
            - **Sentiment d'accomplissement apr√®s le don**
              *"Sentiment de fiert√© de pouvoir aider d'autres personnes."*
            
            - **Connaissance de son groupe sanguin et statut de sant√©**
              *"J'appr√©cie de recevoir mon bilan sanguin apr√®s chaque don."*
            
            - **Collation et temps de repos**
              *"La collation apr√®s le don √©tait appr√©ciable et le personnel veillait √† notre bien-√™tre."*
            """)
        
        with col2:
            st.subheader("Principaux points d'insatisfaction")
            st.markdown("""
            - **Temps d'attente parfois long**
              *"J'ai attendu plus d'une heure avant d'√™tre pris en charge."*
            
            - **Manque d'information sur l'utilisation du sang collect√©**
              *"J'aimerais savoir comment mon sang a √©t√© utilis√©."*
            
            - **Accessibilit√© limit√©e des lieux de collecte**
              *"Le centre est difficile d'acc√®s en transports en commun."*
            
            - **Suivi post-don insuffisant**
              *"Pas de nouvelles apr√®s le don, j'aurais aim√© √™tre inform√©."*
            """)
        
        # Recommandations
        st.subheader("Recommandations")
        
        recommendations = {
            "Axe d'am√©lioration": [
                "Temps d'attente", 
                "Communication", 
                "Suivi des donneurs", 
                "Formation du personnel",
                "Accessibilit√©",
                "Exp√©rience globale"
            ],
            "Recommandation": [
                "Optimiser les flux de travail et renforcer le syst√®me de rendez-vous",
                "Am√©liorer la communication sur l'impact des dons et leur utilisation",
                "Mettre en place un syst√®me de suivi syst√©matique post-don",
                "Former le personnel √† mieux g√©rer les pr√©occupations des donneurs",
                "Augmenter les options de transport et la signal√©tique",
                "Cr√©er un environnement plus accueillant et confortable"
            ],
            "Priorit√©": [
                "Haute", 
                "Moyenne", 
                "Haute", 
                "Moyenne",
                "Basse",
                "Moyenne"
            ]
        }
        
        # Cr√©er un DataFrame et l'afficher
        recommendations_df = pd.DataFrame(recommendations)
        st.dataframe(recommendations_df, use_container_width=True)
        
        
def show_eligibility_prediction(data_dict, model, required_columns=None, feature_stats={}):
    """
    Affiche l'interface de pr√©diction avec r√®gles de s√©curit√© strictes
    et sauvegarde les donn√©es saisies dans le fichier CSV
    """
    import pandas as pd
    from datetime import datetime
    import os
    
    st.header("ü§ñ Pr√©diction d'√âligibilit√©")
    
    st.markdown("""
    Cette section vous permet de pr√©dire l'√©ligibilit√© d'un potentiel donneur
    en fonction de ses caract√©ristiques d√©mographiques et de sant√©.
    """)
    
    if model is None:
        st.warning("Le mod√®le de pr√©diction n'est pas disponible.")
        return

    # Dictionnaire pour stocker les valeurs
    input_values = {}
    
    # Organisation par onglets
    tabs = st.tabs(["Informations g√©n√©rales", "Sant√©", "Localisation"])
    
    # Onglet 1: Informations g√©n√©rales
    with tabs[0]:
        col1, col2 = st.columns(2)
        
        with col1:
            # √Çge
            age = st.slider("√Çge", 18, 70, 35)
            input_values["age"] = age
            
            # Calculer le groupe d'√¢ge
            if age < 18:
                age_group = "<18"
            elif age <= 25:
                age_group = "18-25"
            elif age <= 35:
                age_group = "26-35"
            elif age <= 45:
                age_group = "36-45"
            elif age <= 55:
                age_group = "46-55"
            elif age <= 65:
                age_group = "56-65"
            else:
                age_group = ">65"
            input_values["groupe_age"] = age_group
            
            # Genre
            genre = st.radio("Genre", ["Homme", "Femme"])
            input_values["Genre"] = genre
            
            # Exp√©rience de don
            deja_donne = st.radio("A d√©j√† donn√© le sang ?", ["Oui", "Non"])
            input_values["A-t-il (elle) d√©j√† donn√© le sang"] = deja_donne
            input_values["experience_don"] = 1 if deja_donne == "Oui" else 0
        
        with col2:
            # Niveau d'√©tudes
            niveau_etude = st.selectbox("Niveau d'√©tudes", 
                                       ["Non pr√©cis√©", "Primaire", "Secondaire", "Universitaire"])
            input_values["Niveau d'etude"] = niveau_etude
            
            # Situation matrimoniale
            situation_matrimoniale = st.selectbox("Situation matrimoniale", 
                                                 ["Non pr√©cis√©", "C√©libataire", "Mari√©(e)", 
                                                  "Divorc√©(e)", "Veuf/Veuve"])
            input_values["Situation Matrimoniale (SM)"] = situation_matrimoniale
            
            # Profession
            profession = st.text_input("Profession", "Non pr√©cis√©")
            input_values["Profession"] = profession
            
            # Religion
            religion = st.selectbox("Religion", 
                                   ["Non pr√©cis√©", "Chr√©tien(ne)", "Musulman(e)", "Autre"])
            input_values["Religion"] = religion
            
            # Nationalit√©
            nationalite = st.selectbox("Nationalit√©", ["Camerounaise", "Autre"])
            input_values["Nationalit√©"] = nationalite
            
            # Groupe sanguin (ajout√© pour la recherche)
            groupe_sanguin = st.selectbox("Groupe sanguin", 
                                          ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-", "Non pr√©cis√©"])
            input_values["Groupe sanguin"] = groupe_sanguin
    
    # Onglet 2: Sant√©
    with tabs[1]:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Conditions de sant√©")
            
            # VIH, h√©patite - CRIT√àRE D'EXCLUSION ABSOLU
            vih_hbs_hcv = st.checkbox("Porteur de VIH, h√©patite B ou C")
            input_values["porteur_vih_hbs_hcv"] = 1 if vih_hbs_hcv else 0
            input_values["Porteur(HIV,hbs,hcv)_indicateur"] = 1.0 if vih_hbs_hcv else 0.0
            
            # Afficher un avertissement si VIH/h√©patite s√©lectionn√©
            if vih_hbs_hcv:
                st.warning("‚ö†Ô∏è Crit√®re d'exclusion absolu : Porteur de VIH ou d'h√©patite B/C")
            
            # Autres conditions m√©dicales
            diabete = st.checkbox("Diab√©tique")
            input_values["diabetique"] = 1 if diabete else 0
            input_values["Diab√©tique_indicateur"] = 1.0 if diabete else 0.0
            
            hypertension = st.checkbox("Hypertendu")
            input_values["hypertendu"] = 1 if hypertension else 0
            input_values["Hypertendus_indicateur"] = 1.0 if hypertension else 0.0
            
            asthme = st.checkbox("Asthmatique")
            input_values["asthmatique"] = 1 if asthme else 0
            input_values["Asthmatiques_indicateur"] = 1.0 if asthme else 0.0
            
            # Crit√®res d'exclusion absolus
            drepanocytaire = st.checkbox("Dr√©panocytaire")
            input_values["drepanocytaire"] = 1 if drepanocytaire else 0
            input_values["Drepanocytaire_indicateur"] = 1.0 if drepanocytaire else 0.0
            if drepanocytaire:
                st.warning("‚ö†Ô∏è Crit√®re d'exclusion absolu : Dr√©panocytaire")
            
            cardiaque = st.checkbox("Probl√®mes cardiaques")
            input_values["cardiaque"] = 1 if cardiaque else 0
            input_values["Cardiaque_indicateur"] = 1.0 if cardiaque else 0.0
            if cardiaque:
                st.warning("‚ö†Ô∏è Crit√®re d'exclusion absolu : Probl√®mes cardiaques")
        
        with col2:
            # Taux d'h√©moglobine
            taux_hemoglobine = st.number_input("Taux d'h√©moglobine (g/dL)", 
                                              min_value=7.0, max_value=20.0, value=13.5, step=0.1)
            
            # Utiliser exactement le m√™me caract√®re apostrophe que celui attendu par le mod√®le
            input_values["Taux d\u2019h\u00e9moglobine"] = taux_hemoglobine
            
            # Avertissement pour taux d'h√©moglobine bas
            if (genre == "Homme" and taux_hemoglobine < 13.0) or (genre == "Femme" and taux_hemoglobine < 12.0):
                st.warning(f"‚ö†Ô∏è Taux d'h√©moglobine insuffisant pour un{'e' if genre == 'Femme' else ''} {genre.lower()}")
            
            # Ajouter d'autres caract√©ristiques m√©dicales
            transfusion = st.checkbox("Ant√©c√©dent de transfusion")
            input_values["transfusion"] = 1 if transfusion else 0
            
            tatouage = st.checkbox("Tatou√©")
            input_values["tatoue"] = 1 if tatouage else 0
            
            scarification = st.checkbox("Scarifi√©")
            input_values["scarifie"] = 1 if scarification else 0
    
    # Onglet 3: Localisation
    with tabs[2]:
        col1, col2 = st.columns(2)
        
        with col1:
            # Arrondissement
            arrondissement = st.selectbox("Arrondissement", 
                                         ["Douala 1", "Douala 2", "Douala 3", "Douala 4", "Douala 5", 
                                          "Douala (Non pr√©cis√©)", "Autre"])
            
            input_values["Arrondissement de r√©sidence"] = arrondissement
            input_values["arrondissement_clean"] = arrondissement
        
        with col2:
            # Quartier
            quartier = st.text_input("Quartier de r√©sidence", "Non pr√©cis√©")
            
            input_values["Quartier de R√©sidence"] = quartier
            input_values["quartier_clean"] = quartier
    
    # Num√©ro de t√©l√©phone (ajout pour le suivi)
    telephone = st.text_input("Num√©ro de t√©l√©phone (optionnel)", "")
    if telephone:
        try:
            input_values["Num√©ro_t√©l√©phone"] = int(telephone.replace(" ", ""))
        except:
            input_values["Num√©ro_t√©l√©phone"] = None
    
    # Consentement pour √™tre recontact√©
    consentement = st.checkbox("Consentement pour √™tre contact√© ult√©rieurement")
    input_values["Consentement_contact"] = "Oui" if consentement else "Non"
    
    # Bouton de pr√©diction avec avertissement pour crit√®res d'exclusion
    if vih_hbs_hcv or drepanocytaire or cardiaque:
        st.warning("‚ö†Ô∏è Des crit√®res d'exclusion absolus ont √©t√© d√©tect√©s. Le donneur sera consid√©r√© comme non √©ligible.")
    
    if st.button("Pr√©dire l'√©ligibilit√©"):
        # Faire la pr√©diction avec les r√®gles de s√©curit√©
        result, confidence = predict_eligibility(model, input_values, required_columns, feature_stats)
        
        # Stocker la confiance pour le classement ult√©rieur (pour la recherche)
        input_values["confidence_score"] = confidence
        
        # Afficher le r√©sultat
        if result == "√âligible":
            st.success(f"Pr√©diction : {result} (Confiance : {confidence:.1f}%)")
            input_values["√âLIGIBILIT√â AU DON."] = "Oui"
            input_values["eligibilite_code"] = 1
        elif result == "Non √©ligible":
            st.error(f"Pr√©diction : {result} (Confiance : {confidence:.1f}%)")
            input_values["√âLIGIBILIT√â AU DON."] = "Non"
            input_values["eligibilite_code"] = 0
        else:
            st.warning(f"Pr√©diction : {result}")
            input_values["√âLIGIBILIT√â AU DON."] = "Ind√©termin√©e"
            input_values["eligibilite_code"] = -1
        
        # Afficher une explication
        st.subheader("Facteurs importants")
        
        # Identifier les facteurs d√©terminants pour la non-√©ligibilit√©
        if result == "Non √©ligible":
            factors = []
            if vih_hbs_hcv:
                factors.append("Porteur de VIH, h√©patite B ou C")
                input_values["Raison de non-eligibilit√© totale  [Porteur(HIV,hbs,hcv)]"] = "Oui"
            if diabete:
                factors.append("Diab√®te")
                input_values["Raison de non-eligibilit√© totale  [Diab√©tique]"] = "Oui"
            if cardiaque:
                factors.append("Probl√®mes cardiaques")
                input_values["Raison de non-eligibilit√© totale  [Cardiaque]"] = "Oui"
            if drepanocytaire:
                factors.append("Dr√©panocytaire")
                input_values["Raison de non-eligibilit√© totale  [Drepanocytaire]"] = "Oui"
            if (genre == "Homme" and taux_hemoglobine < 13.0) or (genre == "Femme" and taux_hemoglobine < 12.0):
                factors.append("Taux d\u2019h\u00e9moglobine bas")
                input_values["Raison indisponibilit√©  [Taux d'h√©moglobine bas ]"] = "Oui"
            if hypertension:
                input_values["Raison de non-eligibilit√© totale  [Hypertendus]"] = "Oui"
            if asthme:
                input_values["Raison de non-eligibilit√© totale  [Asthmatiques]"] = "Oui"
            if transfusion:
                input_values["Raison de non-eligibilit√© totale  [Ant√©c√©dent de transfusion]"] = "Oui"
            if tatouage:
                input_values["Raison de non-eligibilit√© totale  [Tatou√©]"] = "Oui"
            if scarification:
                input_values["Raison de non-eligibilit√© totale  [Scarifi√©]"] = "Oui"
            
            if factors:
                st.warning(f"Facteur(s) d√©terminant(s): {', '.join(factors)}")
        
        # Explication g√©n√©rale
        st.markdown("""
        Les facteurs les plus influents pour l'√©ligibilit√© au don de sang sont:
        1. **Conditions m√©dicales** (VIH, h√©patite, diab√®te, probl√®mes cardiaques)
        2. **Taux d'h√©moglobine** (minimum 12 g/dL pour les femmes, 13 g/dL pour les hommes)
        3. **√Çge** (entre 18 et 65 ans g√©n√©ralement)
        4. **Exp√©rience de don ant√©rieure**
        """)
        
        # Ajouter les champs suppl√©mentaires pour la sauvegarde
        input_values["Date de remplissage de la fiche"] = datetime.now().strftime("%Y-%m-%d")
        
        # Calculer une date de naissance approximative √† partir de l'√¢ge
        annee_actuelle = datetime.now().year
        annee_naissance = annee_actuelle - age
        input_values["Date de naissance"] = f"{annee_naissance}-01-01"  # Date approximative
        
        # Date du don actuel
        input_values["Date_don"] = datetime.now().strftime("%Y-%m-%d")
        
        # Bouton pour sauvegarder les donn√©es
        if st.button("Enregistrer les donn√©es du donneur"):
            try:
                # Chemin du fichier CSV
                csv_path = "data/processed_data/dataset_don_sang_enrichi.csv"
                
                # V√©rifier si le fichier existe
                if os.path.exists(csv_path):
                    # Charger le CSV existant
                    df_existing = pd.read_csv(csv_path, encoding='utf-8')
                    
                    # Cr√©er un DataFrame √† partir des donn√©es saisies
                    df_new = pd.DataFrame([input_values])
                    
                    # S'assurer que toutes les colonnes du fichier original sont pr√©sentes
                    for col in df_existing.columns:
                        if col not in df_new.columns:
                            df_new[col] = None
                    
                    # R√©ordonner les colonnes pour correspondre au fichier original
                    df_new = df_new[df_existing.columns]
                    
                    # Fusionner les DataFrames
                    df_combined = pd.concat([df_existing, df_new], ignore_index=True)
                    
                    # Sauvegarder le fichier combin√©
                    df_combined.to_csv(csv_path, index=False, encoding='utf-8')
                    
                    st.success("Les donn√©es ont √©t√© enregistr√©es avec succ√®s !")
                else:
                    st.error(f"Le fichier {csv_path} n'existe pas. Veuillez v√©rifier le chemin du fichier.")
            except Exception as e:
                st.error(f"Une erreur s'est produite lors de l'enregistrement des donn√©es : {str(e)}")
    
    # CORRECTION 1: Utiliser directement st.download_button au lieu d'un bouton interm√©diaire
    try:
        # Chemin du fichier CSV
        csv_path = "data/processed_data/dataset_don_sang_enrichi.csv"
        
        # V√©rifier si le fichier existe
        if os.path.exists(csv_path):
            with open(csv_path, "rb") as file:
                # AM√âLIORATION 2: Ajouter la date et l'heure au nom du fichier
                current_datetime = datetime.now().strftime("%Y%m%d_%H%M%S")
                file_name = f"dataset_don_sang_{current_datetime}.csv"
                
                st.download_button(
                    label="T√©l√©charger le dataset enrichi",
                    data=file,
                    file_name=file_name,
                    mime="text/csv"
                )
        else:
            st.error(f"Le fichier {csv_path} n'existe pas. Veuillez v√©rifier le chemin du fichier.")
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du t√©l√©chargement : {str(e)}")
    
    # AM√âLIORATION 3: Ajout de la recherche de profils de donneurs √©ligibles
    st.header("üîç Recherche de Donneurs √âligibles")
    
    st.markdown("""
    Cette section vous permet de rechercher les profils de donneurs les plus √©ligibles 
    en fonction de crit√®res sp√©cifiques.
    """)
    
    # D√©finir la fonction de recherche
    def search_eligible_donors(dataset_path, criteria):
        """
        Recherche les donneurs les plus √©ligibles dans le dataset selon les crit√®res.
        
        Args:
            dataset_path (str): Chemin vers le fichier CSV
            criteria (dict): Crit√®res de recherche (√¢ge, groupe sanguin, quartier, ville)
            
        Returns:
            pd.DataFrame: Les 5 profils les plus √©ligibles
        """
        try:
            # Charger le dataset
            df = pd.read_csv(dataset_path, encoding='utf-8')
            
            # Filtrer pour ne garder que les donneurs √©ligibles
            eligible_donors = df[df["√âLIGIBILIT√â AU DON."] == "Oui"]
            
            # Appliquer les filtres si sp√©cifi√©s
            if criteria.get("age_min") and criteria.get("age_max"):
                eligible_donors = eligible_donors[(eligible_donors["age"] >= criteria["age_min"]) & 
                                                 (eligible_donors["age"] <= criteria["age_max"])]
            
            if criteria.get("groupe_sanguin") and criteria["groupe_sanguin"] != "Tous":
                eligible_donors = eligible_donors[eligible_donors["Groupe sanguin"] == criteria["groupe_sanguin"]]
                
            if criteria.get("quartier") and criteria["quartier"] != "Tous":
                eligible_donors = eligible_donors[eligible_donors["quartier_clean"].str.lower() == 
                                                 criteria["quartier"].lower()]
                
            if criteria.get("ville") and criteria["ville"] != "Tous":
                eligible_donors = eligible_donors[eligible_donors["arrondissement_clean"].str.contains(
                                                 criteria["ville"], case=False)]
            
            # Trier par priorit√© (si un score de confiance existe)
            if "confidence_score" in eligible_donors.columns:
                eligible_donors = eligible_donors.sort_values(by="confidence_score", ascending=False)
            
            # Prendre les 5 premiers r√©sultats
            top_donors = eligible_donors.head(5)
            
            return top_donors
            
        except Exception as e:
            st.error(f"Erreur lors de la recherche: {str(e)}")
            return pd.DataFrame()  # Retourner un DataFrame vide en cas d'erreur
    
    # Interface de recherche
    search_col1, search_col2 = st.columns(2)
    
    with search_col1:
        age_min = st.number_input("√Çge minimum", min_value=18, max_value=65, value=18)
        age_max = st.number_input("√Çge maximum", min_value=18, max_value=65, value=65)
        
        # On supposera que le groupe sanguin est stock√© dans le dataset
        groupe_sanguin_recherche = st.selectbox("Groupe sanguin", 
                                    ["Tous", "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"])
    
    with search_col2:
        quartier_recherche = st.text_input("Quartier", "Tous")
        ville_recherche = st.selectbox("Ville/Arrondissement", 
                            ["Tous", "Douala 1", "Douala 2", "Douala 3", "Douala 4", "Douala 5", 
                             "Douala (Non pr√©cis√©)", "Autre"])
    
    # Bouton de recherche
    if st.button("Rechercher des donneurs"):
        # Pr√©parer les crit√®res
        search_criteria = {
            "age_min": age_min,
            "age_max": age_max,
            "groupe_sanguin": groupe_sanguin_recherche,
            "quartier": quartier_recherche,
            "ville": ville_recherche
        }
        
        # Chemin du dataset
        dataset_path = "data/processed_data/dataset_don_sang_enrichi.csv"
        
        # Effectuer la recherche
        results = search_eligible_donors(dataset_path, search_criteria)
        
        # Afficher les r√©sultats
        if not results.empty:
            st.success(f"{len(results)} donneur(s) √©ligible(s) trouv√©(s)")
            
            # Colonnes √† afficher (nous pouvons les ajuster selon les besoins)
            display_columns = ["age", "Genre", "Groupe sanguin", "quartier_clean", 
                               "arrondissement_clean", "Taux d\u2019h\u00e9moglobine", "Num√©ro_t√©l√©phone"]
            
            # S'assurer que toutes les colonnes existent
            existing_columns = [col for col in display_columns if col in results.columns]
            
            # Renommer les colonnes pour l'affichage
            column_names = {
                "age": "√Çge",
                "Genre": "Genre",
                "Groupe sanguin": "Groupe sanguin",
                "quartier_clean": "Quartier",
                "arrondissement_clean": "Arrondissement",
                "Taux d\u2019h\u00e9moglobine": "Taux d'h√©moglobine",
                "Num√©ro_t√©l√©phone": "T√©l√©phone"
            }
            
            # Filtrer et renommer
            display_df = results[existing_columns].rename(columns=column_names)
            
            # Afficher le tableau
            st.dataframe(display_df)
        else:
            st.warning("Aucun donneur √©ligible ne correspond √† ces crit√®res.")


if __name__ == "__main__":
    main()